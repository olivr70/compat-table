// ES6 compatibility checks
// -------------------------
var unableMsg = 'Unable to run this test';
function wrapStrict(f) { return function() { var v = f(); return v === true ? 'strict' : v; } }
function f(b){try{return new Function('global',b)} catch(e){try { return wrapStrict(new Function('global','"use strict";'+b)); } catch (ee) { return function(){return ee;}}}}
function a(b){ try { return new Function('global', 'asyncTestPassed', b); } catch (e) { return e; } }
module.exports = {
  es6: { // group

    optimisation: {

      "proper tail calls (tail call optimisation)": { // test+
        directRecursion:f("\"use strict\";\n        return (function f(n){\n          if (n <= 0) {\n            return  \"foo\";\n          }\n          return f(n - 1);\n        }(1e6)) === \"foo\";"),
        mutualRecursion:f("\"use strict\";\n        function f(n){\n          if (n <= 0) {\n            return  \"foo\";\n          }\n          return g(n - 1);\n        }\n        function g(n){\n          if (n <= 0) {\n            return  \"bar\";\n          }\n          return f(n - 1);\n        }\n        return f(1e6) === \"foo\" && f(1e6+1) === \"bar\";")
      }
    },
    syntax: {

      "default function parameters": { // test+
        basicFunctionality:f("return (function (a = 1, b = 2) { return a === 3 && b === 2; }(3));"),
        explicitUndefinedDefersToTheDefault:f("return (function (a = 1, b = 2) { return a === 1 && b === 3; }(undefined, 3));"),
        defaultsCanReferToPreviousParams:f("return (function (a, b = a) { return b === 5; }(5));"),
        argumentsObjectInteraction:f("return (function (a = \"baz\", b = \"qux\", c = \"quux\") {\n          a = \"corge\";\n          // The arguments object is not mapped to the\n          // parameters, even outside of strict mode.\n          return arguments.length === 2\n            && arguments[0] === \"foo\"\n            && arguments[1] === \"bar\";\n        }(\"foo\", \"bar\"));"),
        temporalDeadZone:f("return (function(x = 1) {\n          try {\n            eval(\"(function(a=a){}())\");\n            return false;\n          } catch(e) {}\n          try {\n            eval(\"(function(a=b,b){}())\");\n            return false;\n          } catch(e) {}\n          return true;\n        }());"),
        separateScope:f("return (function(a=function(){\n          return typeof b === 'undefined';\n        }){\n          var b = 1;\n          return a();\n        }());"),
        newFunctionSupport:f("return new Function(\"a = 1\", \"b = 2\",\n          \"return a === 3 && b === 2;\"\n        )(3);")
      },
      "rest parameters": { // test+
        basicFunctionality:f("return (function (foo, ...args) {\n          return args instanceof Array && args + \"\" === \"bar,baz\";\n        }(\"foo\", \"bar\", \"baz\"));"),
        functionLengthProperty:f("return function(a, ...b){}.length === 1 && function(...c){}.length === 0;"),
        argumentsObjectInteraction:f("return (function (foo, ...args) {\n          foo = \"qux\";\n          // The arguments object is not mapped to the\n          // parameters, even outside of strict mode.\n          return arguments.length === 3\n            && arguments[0] === \"foo\"\n            && arguments[1] === \"bar\"\n            && arguments[2] === \"baz\";\n        }(\"foo\", \"bar\", \"baz\"));"),
        canTBeUsedInSetters:f("return (function (...args) {\n          try {\n            eval(\"({set e(...args){}})\");\n          } catch(e) {\n            return true;\n          }\n        }());"),
        newFunctionSupport:f("return new Function(\"a\", \"...b\",\n          \"return b instanceof Array && a+b === 'foobar,baz';\"\n        )('foo','bar','baz');")
      },
      "spread (...) operator": { // test+
        withArraysInFunctionCalls:f("return Math.max(...[1, 2, 3]) === 3"),
        withArraysInArrayLiterals:f("return [...[1, 2, 3]][2] === 3;"),
        withSparseArraysInFunctionCalls:f("var a = Array(...[,,]);\n        return \"0\" in a && \"1\" in a && '' + a[0] + a[1] === \"undefinedundefined\";"),
        withSparseArraysInArrayLiterals:f("var a = [...[,,]];\n        return \"0\" in a && \"1\" in a && '' + a[0] + a[1] === \"undefinedundefined\";"),
        withStringsInFunctionCalls:f("return Math.max(...\"1234\") === 4;"),
        withStringsInArrayLiterals:f("return [\"a\", ...\"bcd\", \"e\"][3] === \"d\";"),
        withAstralPlaneStringsInFunctionCalls:f("return Array(...\"𠮷𠮶\")[0] === \"𠮷\";"),
        withAstralPlaneStringsInArrayLiterals:f("return [...\"𠮷𠮶\"][0] === \"𠮷\";"),
        withGeneratorInstancesInCalls:f("var iterable = (function*(){ yield 1; yield 2; yield 3; }());\n        return Math.max(...iterable) === 3;"),
        withGeneratorInstancesInArrays:f("var iterable = (function*(){ yield \"b\"; yield \"c\"; yield \"d\"; }());\n        return [\"a\", ...iterable, \"e\"][3] === \"d\";"),
        withGenericIterablesInCalls:f("var iterable = global.__createIterableObject([1, 2, 3]);\n        return Math.max(...iterable) === 3;"),
        withGenericIterablesInArrays:f("var iterable = global.__createIterableObject([\"b\", \"c\", \"d\"]);\n        return [\"a\", ...iterable, \"e\"][3] === \"d\";"),
        withInstancesOfIterablesInCalls:f("var iterable = global.__createIterableObject([1, 2, 3]);\n        return Math.max(...Object.create(iterable)) === 3;"),
        withInstancesOfIterablesInArrays:f("var iterable = global.__createIterableObject([\"b\", \"c\", \"d\"]);\n        return [\"a\", ...Object.create(iterable), \"e\"][3] === \"d\";"),
        spreadingNonIterablesIsARuntimeError:f("try {\n          Math.max(...2);\n        } catch(e) {\n          return Math.max(...[1, 2, 3]) === 3;\n        }")
      },
      "object literal extensions": { // test+
        computedProperties:f("var x = 'y';\n        return ({ [x]: 1 }).y === 1;"),
        shorthandProperties:f("var a = 7, b = 8, c = {a,b};\n        return c.a === 7 && c.b === 8;"),
        shorthandMethods:f("return ({ y() { return 2; } }).y() === 2;"),
        stringKeyedShorthandMethods:f("return ({ \"foo bar\"() { return 4; } })[\"foo bar\"]() === 4;"),
        computedShorthandMethods:f("var x = 'y';\n        return ({ [x](){ return 1 } }).y() === 1;"),
        computedAccessors:f("var x = 'y',\n            valueSet,\n            obj = {\n              get [x] () { return 1 },\n              set [x] (value) { valueSet = value }\n            };\n        obj.y = 'foo';\n        return obj.y === 1 && valueSet === 'foo';")
      },
      "for..of loops": { // test+
        withArrays:f("var arr = [5];\n        for (var item of arr)\n          return item === 5;"),
        withSparseArrays:f("var arr = [,,];\n        var count = 0;\n        for (var item of arr)\n          count += (item === undefined);\n        return count === 2;"),
        withStrings:f("var str = \"\";\n        for (var item of \"foo\")\n          str += item;\n        return str === \"foo\";"),
        withAstralPlaneStrings:f("var str = \"\";\n        for (var item of \"𠮷𠮶\")\n          str += item + \" \";\n        return str === \"𠮷 𠮶 \";"),
        withGeneratorInstances:f("var result = \"\";\n        var iterable = (function*(){ yield 1; yield 2; yield 3; }());\n        for (var item of iterable) {\n          result += item;\n        }\n        return result === \"123\";"),
        withGenericIterables:f("var result = \"\";\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        for (var item of iterable) {\n          result += item;\n        }\n        return result === \"123\";"),
        withInstancesOfGenericIterables:f("var result = \"\";\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        for (var item of Object.create(iterable)) {\n          result += item;\n        }\n        return result === \"123\";"),
        iteratorClosingBreak:f("var closed = false;\n        var iter = __createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        for (var it of iter) break;\n        return closed;"),
        iteratorClosingThrow:f("var closed = false;\n        var iter = __createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          for (var it of iter) throw 0;\n        } catch(e){}\n        return closed;")
      },
      "octal and binary literals": { // test+
        octalLiterals:f("return 0o10 === 8 && 0O10 === 8;"),
        binaryLiterals:f("return 0b10 === 2 && 0B10 === 2;"),
        octalSupportedByNumber:f("return Number('0o1') === 1;"),
        binarySupportedByNumber:f("return Number('0b1') === 1;")
      },
      "template strings": { // test+
        basicFunctionality:f("var a = \"ba\", b = \"QUX\";\n        return `foo bar\n        ${a + \"z\"} ${b.toLowerCase()}` === \"foo bar\\nbaz qux\";"),
        toStringConversion:f("var a = {\n          toString: function() { return \"foo\"; },\n          valueOf: function() { return \"bar\"; },\n        };\n        return `${a}` === \"foo\";"),
        taggedTemplateStrings:f("var called = false;\n        function fn(parts, a, b) {\n          called = true;\n          return parts instanceof Array &&\n            parts[0]     === \"foo\"      &&\n            parts[1]     === \"bar\\n\"    &&\n            parts.raw[0] === \"foo\"      &&\n            parts.raw[1] === \"bar\\\\n\"   &&\n            a === 123                   &&\n            b === 456;\n        }\n        return fn `foo${123}bar\\n${456}` && called;"),
        passedArrayIsFrozen:f("return (function(parts) {\n          return Object.isFrozen(parts) && Object.isFrozen(parts.raw);\n        }) `foo${0}bar${0}baz`;"),
        lineBreakNormalisation:f("var cr   = eval(\"`x\" + String.fromCharCode(13)    + \"y`\");\n        var lf   = eval(\"`x\" + String.fromCharCode(10)    + \"y`\");\n        var crlf = eval(\"`x\" + String.fromCharCode(13,10) + \"y`\");\n\n        return cr.length === 3 && lf.length === 3 && crlf.length === 3\n          && cr[1] === lf[1] && lf[1] === crlf[1] && crlf[1] === '\\n';")
      },
      "RegExp \"y\" and \"u\" flags": { // test+
        yFlag:f("var re = new RegExp('\\\\w', 'y');\n        re.exec('xy');\n        return (re.exec('xy')[0] === 'y');"),
        yFlagLastIndex:f("var re = new RegExp('yy', 'y');\n        re.lastIndex = 3;\n        var result = re.exec('xxxyyxx')[0];\n        return result === 'yy' && re.lastIndex === 5;"),
        uFlag:f("return \"𠮷\".match(/^.$/u)[0].length === 2;"),
        uFlagUnicodeCodePointEscapes:f("return \"𝌆\".match(/\\u{1d306}/u)[0].length === 2;")
      },
      "destructuring": { // test+
        withArrays:f("var [a, , [b], c] = [5, null, [6]];\n        var d, e;\n        [d,e] = [7,8];\n        return a === 5 && b === 6 && c === undefined\n          && d === 7 && e === 8;"),
        withSparseArrays:f("var [a, , b] = [,,,];\n        return a === undefined && b === undefined;"),
        withStrings:f("var [a, b, c] = \"ab\";\n        var d, e;\n        [d,e] = \"de\";\n        return a === \"a\" && b === \"b\" && c === undefined\n          && d === \"d\" && e === \"e\";"),
        withAstralPlaneStrings:f("var c;\n        [c] = \"𠮷𠮶\";\n        return c === \"𠮷\";"),
        withGeneratorInstances:f("var [a, b, c] = (function*(){ yield 1; yield 2; }());\n        var d, e;\n        [d, e] = (function*(){ yield 3; yield 4; }());\n        return a === 1 && b === 2 && c === undefined\n          && d === 3 && e === 4;"),
        withGenericIterables:f("var [a, b, c] = global.__createIterableObject([1, 2]);\n        var d, e;\n        [d, e] = global.__createIterableObject([3, 4]);\n        return a === 1 && b === 2 && c === undefined\n          && d === 3 && e === 4;"),
        withInstancesOfGenericIterables:f("var [a, b, c] = Object.create(global.__createIterableObject([1, 2]))\n        var d, e;\n        [d, e] = Object.create(global.__createIterableObject([3, 4]));\n        return a === 1 && b === 2 && c === undefined\n          && d === 3 && e === 4;"),
        iteratorClosing:f("var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        var [a, b] = iter;\n        return closed;"),
        iterableDestructuringExpression:f("var a, b, iterable = [1,2];\n        return ([a, b] = iterable) === iterable;"),
        chainedIterableDestructuring:f("var a,b,c,d;\n        [a,b] = [c,d] = [1,2];\n        return a === 1 && b === 2 && c === 1 && d === 2;"),
        trailingCommasInIterablePatterns:f("var [a,] = [1];\n        return a === 1;"),
        withObjects:f("var {c, x:d, e} = {c:7, x:8};\n        var f, g;\n        ({f,g} = {f:9,g:10});\n        return c === 7 && d === 8 && e === undefined\n          && f === 9 && g === 10;"),
        objectDestructuringWithPrimitives:f("var {toFixed} = 2;\n        var {slice} = '';\n        var toString, match;\n        ({toString} = 2);\n        ({match} = '');\n        return toFixed === Number.prototype.toFixed\n          && toString === Number.prototype.toString\n          && slice === String.prototype.slice\n          && match === String.prototype.match;"),
        trailingCommasInObjectPatterns:f("var {a,} = {a:1};\n        return a === 1;"),
        objectDestructuringExpression:f("var a, b, obj = { a:1, b:2 };\n        return ({a,b} = obj) === obj;"),
        parenthesisedLeftHandSideIsASyntaxError:f("var a, b;\n        ({a,b} = {a:1,b:2});\n        try {\n          eval(\"({a,b}) = {a:3,b:4};\");\n        }\n        catch(e) {\n          return a === 1 && b === 2;\n        }"),
        chainedObjectDestructuring:f("var a,b,c,d;\n        ({a,b} = {c,d} = {a:1,b:2,c:3,d:4});\n        return a === 1 && b === 2 && c === 3 && d === 4;"),
        throwsOnNullAndUndefined:f("try {\n          var {a} = null;\n          return false;\n        } catch(e) {}\n        try {\n          var {b} = undefined;\n          return false;\n        } catch(e) {}\n        return true;"),
        computedProperties:f("var qux = \"corge\";\n        var { [qux]: grault } = { corge: \"garply\" };\n        return grault === \"garply\";"),
        multiplesInASingleVarStatement:f("var [a,b] = [5,6], {c,d} = {c:7,d:8};\n        return a === 5 && b === 6 && c === 7 && d === 8;"),
        nested:f("var [e, {x:f, g}] = [9, {x:10}];\n        var {h, x:[i]} = {h:11, x:[12]};\n        return e === 9 && f === 10 && g === undefined\n          && h === 11 && i === 12;"),
        inParameters:f("return (function({a, x:b, y:e}, [c, d]) {\n          return a === 1 && b === 2 && c === 3 &&\n            d === 4 && e === undefined;\n        }({a:1, x:2}, [3, 4]));"),
        inParametersArgumentsInteraction:f("return (function({a, x:b, y:e}, [c, d]) {\n          return arguments[0].a === 1 && arguments[0].x === 2\n            && !(\"y\" in arguments[0]) && arguments[1] + '' === \"3,4\";\n        }({a:1, x:2}, [3, 4]));"),
        inParametersNewFunctionSupport:f("return new Function(\"{a, x:b, y:e}\",\"[c, d]\",\n          \"return a === 1 && b === 2 && c === 3 && \"\n          + \"d === 4 && e === undefined;\"\n        )({a:1, x:2}, [3, 4]);"),
        inParametersFunctionLengthProperty:f("return function({a, b}, [c, d]){}.length === 2;"),
        inForInLoopHeads:f("for(var [i, j, k] in { qux: 1 }) {\n          return i === \"q\" && j === \"u\" && k === \"x\";\n        }"),
        inForOfLoopHeads:f("for(var [i, j, k] of [[1,2,3]]) {\n          return i === 1 && j === 2 && k === 3;\n        }"),
        inCatchHeads:f("try {\n          throw [1,2];\n        } catch([i,j]) {\n          try {\n            throw { k: 3, l: 4 };\n          } catch({k, l}) {\n            return i === 1 && j === 2 && k === 3 && l === 4;\n          }\n        }"),
        rest:f("var [a, ...b] = [3, 4, 5];\n        var [c, ...d] = [6];\n        return a === 3 && b instanceof Array && (b + \"\") === \"4,5\" &&\n           c === 6 && d instanceof Array && d.length === 0;"),
        nestedRest:f("var a = [1, 2, 3], first, last;\n        [first, ...[a[2], last]] = a;\n        return first === 1 && last === 3 && (a + \"\") === \"1,2,2\";"),
        emptyPatterns:f("[] = [1,2];\n        ({} = {a:1,b:2});\n        return true;"),
        emptyPatternsInParameters:f("return function ([],{}){\n          return arguments[0] + '' === \"3,4\" && arguments[1].x === \"foo\";\n        }([3,4],{x:\"foo\"});"),
        defaults:f("var {a = 1, b = 0, z:c = 3} = {b:2, z:undefined};\n        var [d = 0, e = 5, f = 6] = [4,,undefined];\n        return a === 1 && b === 2 && c === 3\n          && d === 4 && e === 5 && f === 6;"),
        defaultsInParameters:f("return (function({a = 1, b = 0, c = 3, x:d = 0, y:e = 5},\n            [f = 6, g = 0, h = 8]) {\n          return a === 1 && b === 2 && c === 3 && d === 4 &&\n            e === 5 && f === 6 && g === 7 && h === 8;\n        }({b:2, c:undefined, x:4},[, 7, undefined]));"),
        defaultsLetTemporalDeadZone:f("var {a, b = 2} = {a:1};\n        try {\n          eval(\"let {c = c} = {};\");\n          return false;\n        } catch(e){}\n        try {\n          eval(\"let {c = d, d} = {d:1};\");\n          return false;\n        } catch(e){}\n        return a === 1 && b === 2;"),
        defaultsInParametersSeparateScope:f("return (function({a=function(){\n          return typeof b === 'undefined';\n        }}){\n          var b = 1;\n          return a();\n        }({}));"),
        defaultsInParametersNewFunctionSupport:f("return new Function(\"{a = 1, b = 0, c = 3, x:d = 0, y:e = 5}\",\n          \"return a === 1 && b === 2 && c === 3 && d === 4 && e === 5;\"\n        )({b:2, c:undefined, x:4});")
      },
      "Unicode code point escapes": { // test+
        inStrings:f("return '\\u{1d306}' == '\\ud834\\udf06';"),
        inIdentifiers:f("var \\u{102C0} = { \\u{102C0} : 2 };\n        return \\u{102C0}['\\ud800\\udec0'] === 2;")
      },
      "new.target": { // test+
        inConstructors:f("var passed = false;\n        new function f() {\n          passed = (new.target === f);\n        }();\n        (function() {\n          passed &= (new.target === undefined);\n        }());\n        return passed;"),
        assignmentIsAnEarlyError:f("var passed = false;\n        new function f() {\n          passed = (new.target === f);\n        }();\n\n        try {\n          Function(\"new.target = function(){};\");\n        } catch(e) {\n          return passed;\n        }")
      }
    },
    bindings: {

      "const": { // test+
        basicSupport:f("const foo = 123;\n        return (foo === 123);"),
        isBlockScoped:f("const bar = 123;\n        { const bar = 456; }\n        return bar === 123;"),
        redefiningAConstIsAnError:f("const baz = 1;\n        try {\n          Function(\"const foo = 1; foo = 2;\")();\n        } catch(e) {\n          return true;\n        }"),
        temporalDeadZone:f("var passed = (function(){ try { qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        const qux = 456;\n        fn();\n        return passed;"),
        basicSupportStrictMode:f("\"use strict\";\n        const foo = 123;\n        return (foo === 123);"),
        isBlockScopedStrictMode:f("'use strict';\n        const bar = 123;\n        { const bar = 456; }\n        return bar === 123;"),
        redefiningAConstStrictMode:f("'use strict';\n        const baz = 1;\n        try {\n          Function(\"'use strict'; const foo = 1; foo = 2;\")();\n        } catch(e) {\n          return true;\n        }"),
        temporalDeadZoneStrictMode:f("'use strict';\n        var passed = (function(){ try { qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        const qux = 456;\n        fn();\n        return passed;")
      },
      "let": { // test+
        basicSupport:f("let foo = 123;\n        return (foo === 123);"),
        isBlockScoped:f("let bar = 123;\n        { let bar = 456; }\n        return bar === 123;"),
        forLoopStatementScope:f("let baz = 1;\n        for(let baz = 0; false; false) {}\n        return baz === 1;"),
        temporalDeadZone:f("var passed = (function(){ try {  qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        let qux = 456;\n        fn();\n        return passed;"),
        forLoopIterationScope:f("let scopes = [];\n        for(let i = 0; i < 2; i++) {\n          scopes.push(function(){ return i; });\n        }\n        let passed = (scopes[0]() === 0 && scopes[1]() === 1);\n\n        scopes = [];\n        for(let i in { a:1, b:1 }) {\n          scopes.push(function(){ return i; });\n        }\n        passed &= (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n        return passed;"),
        basicSupportStrictMode:f("'use strict';\n        let foo = 123;\n        return (foo === 123);"),
        isBlockScopedStrictMode:f("'use strict';\n        let bar = 123;\n        { let bar = 456; }\n        return bar === 123;"),
        forLoopStatementScopeStrictMode:f("'use strict';\n        let baz = 1;\n        for(let baz = 0; false; false) {}\n        return baz === 1;"),
        temporalDeadZoneStrictMode:f("'use strict';\n        var passed = (function(){ try {  qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        let qux = 456;\n        fn();\n        return passed;"),
        forLoopIterationScopeStrictMode:f("'use strict';\n        let scopes = [];\n        for(let i = 0; i < 2; i++) {\n          scopes.push(function(){ return i; });\n        }\n        let passed = (scopes[0]() === 0 && scopes[1]() === 1);\n\n        scopes = [];\n        for(let i in { a:1, b:1 }) {\n          scopes.push(function(){ return i; });\n        }\n        passed &= (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n        return passed;")
      },
    blockLevelFunctionDeclaration:f("'use strict';\n    function f() { return 1; }\n    {\n      function f() { return 2; }\n    }\n    return f() === 1;")
    },
    functions: {

      "arrow functions": { // test+
        _0Parameters:f("return (() => 5)() === 5;"),
        _1ParameterNoBrackets:f("var b = x => x + \"foo\";\n        return (b(\"fee fie foe \") === \"fee fie foe foo\");"),
        multipleParameters:f("var c = (v, w, x, y, z) => \"\" + v + w + x + y + z;\n        return (c(6, 5, 4, 3, 2) === \"65432\");"),
        lexicalThisBinding:f("var d = { x : \"bar\", y : function() { return z => this.x + z; }}.y();\n        var e = { x : \"baz\", y : d };\n        return d(\"ley\") === \"barley\" && e.y(\"ley\") === \"barley\";"),
        thisUnchangedByCallOrApply:f("var d = { x : \"foo\", y : function() { return () => this.x; }};\n        var e = { x : \"bar\" };\n        return d.y().call(e) === \"foo\" && d.y().apply(e) === \"foo\";"),
        canTBeBoundCanBeCurried:f("var d = { x : \"bar\", y : function() { return z => this.x + z; }};\n        var e = { x : \"baz\" };\n        return d.y().bind(e, \"ley\")() === \"barley\";"),
        lexicalArgumentsBinding:f("var f = (function() { return z => arguments[0]; }(5));\n        return f(6) === 5;"),
        noLineBreakBetweenParamsAndCodeCode:f("return (() => {\n          try { Function(\"x\\n => 2\")(); } catch(e) { return true; }\n        })();"),
        correctPrecedence:f("return (() => {\n          try { Function(\"0 || () => 2\")(); } catch(e) { return true; }\n        })();"),
        noPrototypeProperty:f("var a = () => 5;\n        return !a.hasOwnProperty(\"prototype\");"),
        lexicalSuperBindingInConstructors:f("var received;\n\n        class B {\n          constructor (arg) {\n            received = arg;\n          }\n        }\n        class C extends B {\n          constructor () {\n            var callSuper = () => super('foo');\n            callSuper();\n          }\n        }\n        return new C instanceof C && received === 'foo'"),
        lexicalSuperBindingInMethods:f("class B {\n          qux() {\n            return \"quux\";\n          }\n        }\n        class C extends B {\n          baz() {\n            return x => super.qux();\n          }\n        }\n        var arrow = new C().baz();\n        return arrow() === \"quux\";"),
        lexicalNewTargetBinding:f("function C() {\n          return x => new.target;\n        }\n        return new C()() === C && C()() === undefined;")
      },
      "class": { // test+
        classStatement:f("class C {}\n        return typeof C === \"function\";"),
        isBlockScoped:f("class C {}\n        var c1 = C;\n        {\n          class C {}\n          var c2 = C;\n        }\n        return C === c1;"),
        classExpression:f("return typeof class C {} === \"function\";"),
        anonymousClass:f("return typeof class {} === \"function\";"),
        constructor:f("class C {\n          constructor() { this.x = 1; }\n        }\n        return C.prototype.constructor === C\n          && new C().x === 1;"),
        prototypeMethods:f("class C {\n          method() { return 2; }\n        }\n        return typeof C.prototype.method === \"function\"\n          && new C().method() === 2;"),
        stringKeyedMethods:f("class C {\n          \"foo bar\"() { return 2; }\n        }\n        return typeof C.prototype[\"foo bar\"] === \"function\"\n          && new C()[\"foo bar\"]() === 2;"),
        computedPrototypeMethods:f("var foo = \"method\";\n        class C {\n          [foo]() { return 2; }\n        }\n        return typeof C.prototype.method === \"function\"\n          && new C().method() === 2;"),
        staticMethods:f("class C {\n          static method() { return 3; }\n        }\n        return typeof C.method === \"function\"\n          && C.method() === 3;"),
        computedStaticMethods:f("var foo = \"method\";\n        class C {\n          static [foo]() { return 3; }\n        }\n        return typeof C.method === \"function\"\n          && C.method() === 3;"),
        accessorProperties:f("var baz = false;\n        class C {\n          get foo() { return \"foo\"; }\n          set bar(x) { baz = x; }\n        }\n        new C().bar = true;\n        return new C().foo === \"foo\" && baz;"),
        computedAccessorProperties:f("var garply = \"foo\", grault = \"bar\", baz = false;\n        class C {\n          get [garply]() { return \"foo\"; }\n          set [grault](x) { baz = x; }\n        }\n        new C().bar = true;\n        return new C().foo === \"foo\" && baz;"),
        staticAccessorProperties:f("var baz = false;\n        class C {\n          static get foo() { return \"foo\"; }\n          static set bar(x) { baz = x; }\n        }\n        C.bar = true;\n        return C.foo === \"foo\" && baz;"),
        computedStaticAccessorProperties:f("var garply = \"foo\", grault = \"bar\", baz = false;\n        class C {\n          static get [garply]() { return \"foo\"; }\n          static set [grault](x) { baz = x; }\n        }\n        C.bar = true;\n        return C.foo === \"foo\" && baz;"),
        classNameIsLexicallyScoped:f("class C {\n          method() { return typeof C === \"function\"; }\n        }\n        var M = C.prototype.method;\n        C = undefined;\n        return C === undefined && M();"),
        computedNamesTemporalDeadZone:f("try {\n          var B = class C {\n            [C](){}\n          }\n        } catch(e) {\n          return true;\n        }"),
        methodsArenTEnumerable:f("class C {\n          foo() {}\n          static bar() {}\n        }\n        return !C.prototype.propertyIsEnumerable(\"foo\") && !C.propertyIsEnumerable(\"bar\");"),
        implicitStrictMode:f("class C {\n          static method() { return this === undefined; }\n        }\n        return (0,C.method)();"),
        constructorRequiresNew:f("class C {}\n        try {\n          C();\n        }\n        catch(e) {\n          return true;\n        }"),
        extends:f("class B {}\n        class C extends B {}\n        return new C() instanceof B\n          && B.isPrototypeOf(C);"),
        extendsExpressions:f("var B;\n        class C extends (B = class {}) {}\n        return new C() instanceof B\n          && B.isPrototypeOf(C);"),
        extendsNull:f("class C extends null {\n          constructor() { return Object.create(null); }\n        }\n        return Function.prototype.isPrototypeOf(C)\n          && Object.getPrototypeOf(C.prototype) === null;"),
        newTarget:f("var passed = false;\n        new function f() {\n          passed = new.target === f;\n        }();\n\n        class A {\n          constructor() {\n            passed &= new.target === B;\n          }\n        }\n        class B extends A {}\n        new B();\n        return passed;")
      },
      "super": { // test+
        statementInConstructors:f("var passed = false;\n        class B {\n          constructor(a) { passed = (a === \"barbaz\"); }\n        }\n        class C extends B {\n          constructor(a) { super(\"bar\" + a); }\n        }\n        new C(\"baz\");\n        return passed;"),
        expressionInConstructors:f("class B {\n          constructor(a) { return [\"foo\" + a]; }\n        }\n        class C extends B {\n          constructor(a) { return super(\"bar\" + a); }\n        }\n        return new C(\"baz\")[0] === \"foobarbaz\";"),
        inMethodsPropertyAccess:f("class B {}\n        B.prototype.qux = \"foo\";\n        B.prototype.corge = \"baz\";\n        class C extends B {\n          quux(a) { return super.qux + a + super[\"corge\"]; }\n        }\n        C.prototype.qux = \"garply\";\n        return new C().quux(\"bar\") === \"foobarbaz\";"),
        inMethodsMethodCalls:f("class B {\n          qux(a) { return \"foo\" + a; }\n        }\n        class C extends B {\n          qux(a) { return super.qux(\"bar\" + a); }\n        }\n        return new C().qux(\"baz\") === \"foobarbaz\";"),
        methodCallsUseCorrectThisBinding:f("class B {\n          qux(a) { return this.foo + a; }\n        }\n        class C extends B {\n          qux(a) { return super.qux(\"bar\" + a); }\n        }\n        var obj = new C();\n        obj.foo = \"foo\";\n        return obj.qux(\"baz\") === \"foobarbaz\";"),
        constructorCallsUseCorrectNewTargetBinding:f("var passed;\n        class B {\n          constructor() { passed = (new.target === C); }\n        }\n        class C extends B {\n          constructor() { super(); }\n        }\n        new C();\n        return passed;"),
        isStaticallyBound:f("class B {\n          qux() { return \"bar\"; }\n        }\n        class C extends B {\n          qux() { return super.qux() + this.corge; }\n        }\n        var obj = {\n          qux: C.prototype.qux,\n          corge: \"ley\"\n        };\n        return obj.qux() === \"barley\";"),
        superInvokesTheCorrectConstructor:f("// checks that super() is *not* a synonym of super.constructor()\n        var passed;\n        class B {\n            constructor() {\n                passed = true;\n            }\n        };\n        B.prototype.constructor = function () {\n            passed = false;\n        };\n        class C extends B { };\n        new C;\n        return passed;")
      },
      "generators": { // test+
        basicFunctionality:f("function * generator(){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        generatorFunctionExpressions:f("var generator = function * (){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        correctThisBinding:f("function * generator(){\n          yield this.x; yield this.y;\n        };\n        var iterator = { g: generator, x: 5, y: 6 }.g();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        canTUseThisWithNew:f("function * generator(){\n          yield this.x; yield this.y;\n        };\n        try {\n          (new generator()).next();\n        }\n        catch (e) {\n          return true;\n        }"),
        sending:f("var sent;\n        function * generator(){\n          sent = [yield 5, yield 6];\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.next(\"foo\");\n        iterator.next(\"bar\");\n        return sent[0] === \"foo\" && sent[1] === \"bar\";"),
        generatorPrototype:f("function * generatorFn(){}\n        var ownProto = Object.getPrototypeOf(generatorFn());\n        var passed = ownProto === generatorFn.prototype;\n\n        var sharedProto = Object.getPrototypeOf(ownProto);\n        passed &= sharedProto !== Object.prototype &&\n          sharedProto === Object.getPrototypeOf(function*(){}.prototype) &&\n          sharedProto.hasOwnProperty('next');\n\n        return passed;"),
        generatorPrototypeConstructor:f("function * g (){}\n        var iterator = new g.constructor(\"a\",\"b\",\"c\",\"yield a; yield b; yield c;\")(5,6,7);\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        generatorPrototypeThrow:f("var passed = false;\n        function * generator(){\n          try {\n            yield 5; yield 6;\n          } catch(e) {\n            passed = (e === \"foo\");\n          }\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.throw(\"foo\");\n        return passed;"),
        generatorPrototypeReturn:f("function * generator(){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.return(\"quxquux\");\n        passed    &= item.value === \"quxquux\" && item.done === true;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldOperatorPrecedence:f("var passed;\n        function * generator(){\n          passed = yield 0 ? true : false;\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.next(true);\n        return passed;"),
        yieldArrays:f("var iterator = (function * generator() {\n          yield * [5, 6];\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldSparseArrays:f("var iterator = (function * generator() {\n          yield * [,,];\n        }());\n        var item = iterator.next();\n        var passed = item.value === undefined && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldStrings:f("var iterator = (function * generator() {\n          yield * \"56\";\n        }());\n        var item = iterator.next();\n        var passed = item.value === \"5\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === \"6\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldAstralPlaneStrings:f("var iterator = (function * generator() {\n          yield * \"𠮷𠮶\";\n        }());\n        var item = iterator.next();\n        var passed = item.value === \"𠮷\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === \"𠮶\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldGeneratorInstances:f("var iterator = (function * generator() {\n          yield * (function*(){ yield 5; yield 6; yield 7; }());\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldGenericIterables:f("var iterator = (function * generator() {\n          yield * global.__createIterableObject([5, 6, 7]);\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldInstancesOfIterables:f("var iterator = (function * generator() {\n          yield * Object.create(__createIterableObject([5, 6, 7]));\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        yieldOnNonIterablesIsARuntimeError:f("var iterator = (function * generator() {\n          yield * [5];\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        iterator = (function * generator() {\n          yield * 5;\n        }());\n        try {\n          iterator.next();\n        } catch (e) {\n          return passed;\n        }"),
        yieldIteratorClosing:f("var closed = '';\n        var iter = __createIterableObject([1, 2, 3], {\n          'return': function(){\n            closed += 'a';\n            return {done: true};\n          }\n        });\n        var gen = (function* generator(){\n          try {\n            yield *iter;\n          } finally {\n            closed += 'b';\n          }\n        })();\n        gen.next();\n        gen['return']();\n        return closed === 'ab';"),
        yieldIteratorClosingViaThrow:f("var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'throw': undefined,\n          'return': function() {\n            closed = true;\n            return {done: true};\n          }\n        });\n        var gen = (function*(){\n          try {\n            yield *iter;\n          } catch(e){}\n        })();\n        gen.next();\n        gen['throw']();\n        return closed;"),
        shorthandGeneratorMethods:f("var o = {\n          * generator() {\n            yield 5; yield 6;\n          },\n        };\n        var iterator = o.generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        stringKeyedShorthandGeneratorMethods:f("var o = {\n          * \"foo bar\"() {\n            yield 5; yield 6;\n          },\n        };\n        var iterator = o[\"foo bar\"]();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        computedShorthandGenerators:f("var garply = \"generator\";\n        var o = {\n          * [garply] () {\n            yield 5; yield 6;\n          },\n        };\n        var iterator = o.generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        shorthandGeneratorMethodsClasses:f("class C {\n          * generator() {\n            yield 5; yield 6;\n          }\n        };\n        var iterator = new C().generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;"),
        computedShorthandGeneratorsClasses:f("var garply = \"generator\";\n        class C {\n          * [garply] () {\n            yield 5; yield 6;\n          }\n        }\n        var iterator = new C().generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;")
      }
    },
    builtIns: {

      "typed arrays": { // test+
        int8Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Int8Array(buffer);         view[0] = 0x80;\n        return view[0] === -0x80;"),
        uint8Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Uint8Array(buffer);        view[0] = 0x100;\n        return view[0] === 0;"),
        uint8ClampedArray:f("var buffer = new ArrayBuffer(64);\n        var view = new Uint8ClampedArray(buffer); view[0] = 0x100;\n        return view[0] === 0xFF;"),
        int16Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Int16Array(buffer);        view[0] = 0x8000;\n        return view[0] === -0x8000;"),
        uint16Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Uint16Array(buffer);       view[0] = 0x10000;\n        return view[0] === 0;"),
        int32Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Int32Array(buffer);        view[0] = 0x80000000;\n        return view[0] === -0x80000000;"),
        uint32Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Uint32Array(buffer);       view[0] = 0x100000000;\n        return view[0] === 0;"),
        float32Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Float32Array(buffer);       view[0] = 0.1;\n        return view[0] === 0.10000000149011612;"),
        float64Array:f("var buffer = new ArrayBuffer(64);\n        var view = new Float64Array(buffer);       view[0] = 0.1;\n        return view[0] === 0.1;"),
        dataViewInt8:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setInt8 (0, 0x80);\n        return view.getInt8(0) === -0x80;"),
        dataViewUint8:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setUint8(0, 0x100);\n        return view.getUint8(0) === 0;"),
        dataViewInt16:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setInt16(0, 0x8000);\n        return view.getInt16(0) === -0x8000;"),
        dataViewUint16:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setUint16(0, 0x10000);\n        return view.getUint16(0) === 0;"),
        dataViewInt32:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setInt32(0, 0x80000000);\n        return view.getInt32(0) === -0x80000000;"),
        dataViewUint32:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setUint32(0, 0x100000000);\n        return view.getUint32(0) === 0;"),
        dataViewFloat32:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setFloat32(0, 0.1);\n        return view.getFloat32(0) === 0.10000000149011612;"),
        dataViewFloat64:f("var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setFloat64(0, 0.1);\n        return view.getFloat64(0) === 0.1;"),
        arrayBufferSymbolSpecies:f("return typeof ArrayBuffer[Symbol.species] === 'function';"),
        constructorsRequireNew:f("var buffer = new ArrayBuffer(64);\n        var constructors = [\n          'ArrayBuffer',\n          'DataView',\n          'Int8Array',\n          'Uint8Array',\n          'Uint8ClampedArray',\n          'Int16Array',\n          'Uint16Array',\n          'Int32Array',\n          'Uint32Array',\n          'Float32Array',\n          'Float64Array'\n        ];\n        return constructors.every(function (constructor) {\n          try {\n            if (constructor in global) {\n              global[constructor](constructor === \"ArrayBuffer\" ? 64 : buffer);\n            }\n            return false;\n          } catch(e) {\n            return true;\n          }\n        });"),
        constructorsAcceptGenericIterables:f("var constructors = [\n          'Int8Array',\n          'Uint8Array',\n          'Uint8ClampedArray',\n          'Int16Array',\n          'Uint16Array',\n          'Int32Array',\n          'Uint32Array',\n          'Float32Array',\n          'Float64Array'\n        ];\n        for(var i = 0; i < constructors.length; i++){\n          var arr = new global[constructors[i]](__createIterableObject([1, 2, 3]));\n          if(arr.length !== 3 || arr[0] !== 1 || arr[1] !== 2 || arr[2] !== 3)return false;\n        }\n        return true;"),
        correctPrototypeChains:f("var constructors = [\n          'Int8Array',\n          'Uint8Array',\n          'Uint8ClampedArray',\n          'Int16Array',\n          'Uint16Array',\n          'Int32Array',\n          'Uint32Array',\n          'Float32Array',\n          'Float64Array'\n        ];\n        var constructor = Object.getPrototypeOf(Int8Array);\n        var prototype = Object.getPrototypeOf(Int8Array.prototype);\n        if(constructor === Function.prototype || prototype === Object.prototype)return false;\n        for(var i = 0; i < constructors.length; i+=1) {\n          if (!(constructors[i] in global\n              && Object.getPrototypeOf(global[constructors[i]]) === constructor\n              && Object.getPrototypeOf(global[constructors[i]].prototype) === prototype\n              && Object.getOwnPropertyNames(global[constructors[i]].prototype).sort() + ''\n                === \"BYTES_PER_ELEMENT,constructor\")) {\n            return false;\n          }\n        }\n        return true;"),
        typedArrayFrom:f("return typeof Int8Array.from === \"function\" &&\n    typeof Uint8Array.from === \"function\" &&\n    typeof Uint8ClampedArray.from === \"function\" &&\n    typeof Int16Array.from === \"function\" &&\n    typeof Uint16Array.from === \"function\" &&\n    typeof Int32Array.from === \"function\" &&\n    typeof Uint32Array.from === \"function\" &&\n    typeof Float32Array.from === \"function\" &&\n    typeof Float64Array.from === \"function\";"),
        typedArrayOf:f("return typeof Int8Array.of === \"function\" &&\n    typeof Uint8Array.of === \"function\" &&\n    typeof Uint8ClampedArray.of === \"function\" &&\n    typeof Int16Array.of === \"function\" &&\n    typeof Uint16Array.of === \"function\" &&\n    typeof Int32Array.of === \"function\" &&\n    typeof Uint32Array.of === \"function\" &&\n    typeof Float32Array.of === \"function\" &&\n    typeof Float64Array.of === \"function\";"),
        typedArrayPrototypeSubarray:f("return typeof Int8Array.prototype.subarray === \"function\" &&\n    typeof Uint8Array.prototype.subarray === \"function\" &&\n    typeof Uint8ClampedArray.prototype.subarray === \"function\" &&\n    typeof Int16Array.prototype.subarray === \"function\" &&\n    typeof Uint16Array.prototype.subarray === \"function\" &&\n    typeof Int32Array.prototype.subarray === \"function\" &&\n    typeof Uint32Array.prototype.subarray === \"function\" &&\n    typeof Float32Array.prototype.subarray === \"function\" &&\n    typeof Float64Array.prototype.subarray === \"function\";"),
        typedArrayPrototypeJoin:f("return typeof Int8Array.prototype.join === \"function\" &&\n    typeof Uint8Array.prototype.join === \"function\" &&\n    typeof Uint8ClampedArray.prototype.join === \"function\" &&\n    typeof Int16Array.prototype.join === \"function\" &&\n    typeof Uint16Array.prototype.join === \"function\" &&\n    typeof Int32Array.prototype.join === \"function\" &&\n    typeof Uint32Array.prototype.join === \"function\" &&\n    typeof Float32Array.prototype.join === \"function\" &&\n    typeof Float64Array.prototype.join === \"function\";"),
        typedArrayPrototypeIndexOf:f("return typeof Int8Array.prototype.indexOf === \"function\" &&\n    typeof Uint8Array.prototype.indexOf === \"function\" &&\n    typeof Uint8ClampedArray.prototype.indexOf === \"function\" &&\n    typeof Int16Array.prototype.indexOf === \"function\" &&\n    typeof Uint16Array.prototype.indexOf === \"function\" &&\n    typeof Int32Array.prototype.indexOf === \"function\" &&\n    typeof Uint32Array.prototype.indexOf === \"function\" &&\n    typeof Float32Array.prototype.indexOf === \"function\" &&\n    typeof Float64Array.prototype.indexOf === \"function\";"),
        typedArrayPrototypeLastIndexOf:f("return typeof Int8Array.prototype.lastIndexOf === \"function\" &&\n    typeof Uint8Array.prototype.lastIndexOf === \"function\" &&\n    typeof Uint8ClampedArray.prototype.lastIndexOf === \"function\" &&\n    typeof Int16Array.prototype.lastIndexOf === \"function\" &&\n    typeof Uint16Array.prototype.lastIndexOf === \"function\" &&\n    typeof Int32Array.prototype.lastIndexOf === \"function\" &&\n    typeof Uint32Array.prototype.lastIndexOf === \"function\" &&\n    typeof Float32Array.prototype.lastIndexOf === \"function\" &&\n    typeof Float64Array.prototype.lastIndexOf === \"function\";"),
        typedArrayPrototypeSlice:f("return typeof Int8Array.prototype.slice === \"function\" &&\n    typeof Uint8Array.prototype.slice === \"function\" &&\n    typeof Uint8ClampedArray.prototype.slice === \"function\" &&\n    typeof Int16Array.prototype.slice === \"function\" &&\n    typeof Uint16Array.prototype.slice === \"function\" &&\n    typeof Int32Array.prototype.slice === \"function\" &&\n    typeof Uint32Array.prototype.slice === \"function\" &&\n    typeof Float32Array.prototype.slice === \"function\" &&\n    typeof Float64Array.prototype.slice === \"function\";"),
        typedArrayPrototypeEvery:f("return typeof Int8Array.prototype.every === \"function\" &&\n    typeof Uint8Array.prototype.every === \"function\" &&\n    typeof Uint8ClampedArray.prototype.every === \"function\" &&\n    typeof Int16Array.prototype.every === \"function\" &&\n    typeof Uint16Array.prototype.every === \"function\" &&\n    typeof Int32Array.prototype.every === \"function\" &&\n    typeof Uint32Array.prototype.every === \"function\" &&\n    typeof Float32Array.prototype.every === \"function\" &&\n    typeof Float64Array.prototype.every === \"function\";"),
        typedArrayPrototypeFilter:f("return typeof Int8Array.prototype.filter === \"function\" &&\n    typeof Uint8Array.prototype.filter === \"function\" &&\n    typeof Uint8ClampedArray.prototype.filter === \"function\" &&\n    typeof Int16Array.prototype.filter === \"function\" &&\n    typeof Uint16Array.prototype.filter === \"function\" &&\n    typeof Int32Array.prototype.filter === \"function\" &&\n    typeof Uint32Array.prototype.filter === \"function\" &&\n    typeof Float32Array.prototype.filter === \"function\" &&\n    typeof Float64Array.prototype.filter === \"function\";"),
        typedArrayPrototypeForEach:f("return typeof Int8Array.prototype.forEach === \"function\" &&\n    typeof Uint8Array.prototype.forEach === \"function\" &&\n    typeof Uint8ClampedArray.prototype.forEach === \"function\" &&\n    typeof Int16Array.prototype.forEach === \"function\" &&\n    typeof Uint16Array.prototype.forEach === \"function\" &&\n    typeof Int32Array.prototype.forEach === \"function\" &&\n    typeof Uint32Array.prototype.forEach === \"function\" &&\n    typeof Float32Array.prototype.forEach === \"function\" &&\n    typeof Float64Array.prototype.forEach === \"function\";"),
        typedArrayPrototypeMap:f("return typeof Int8Array.prototype.map === \"function\" &&\n    typeof Uint8Array.prototype.map === \"function\" &&\n    typeof Uint8ClampedArray.prototype.map === \"function\" &&\n    typeof Int16Array.prototype.map === \"function\" &&\n    typeof Uint16Array.prototype.map === \"function\" &&\n    typeof Int32Array.prototype.map === \"function\" &&\n    typeof Uint32Array.prototype.map === \"function\" &&\n    typeof Float32Array.prototype.map === \"function\" &&\n    typeof Float64Array.prototype.map === \"function\";"),
        typedArrayPrototypeReduce:f("return typeof Int8Array.prototype.reduce === \"function\" &&\n    typeof Uint8Array.prototype.reduce === \"function\" &&\n    typeof Uint8ClampedArray.prototype.reduce === \"function\" &&\n    typeof Int16Array.prototype.reduce === \"function\" &&\n    typeof Uint16Array.prototype.reduce === \"function\" &&\n    typeof Int32Array.prototype.reduce === \"function\" &&\n    typeof Uint32Array.prototype.reduce === \"function\" &&\n    typeof Float32Array.prototype.reduce === \"function\" &&\n    typeof Float64Array.prototype.reduce === \"function\";"),
        typedArrayPrototypeReduceRight:f("return typeof Int8Array.prototype.reduceRight === \"function\" &&\n    typeof Uint8Array.prototype.reduceRight === \"function\" &&\n    typeof Uint8ClampedArray.prototype.reduceRight === \"function\" &&\n    typeof Int16Array.prototype.reduceRight === \"function\" &&\n    typeof Uint16Array.prototype.reduceRight === \"function\" &&\n    typeof Int32Array.prototype.reduceRight === \"function\" &&\n    typeof Uint32Array.prototype.reduceRight === \"function\" &&\n    typeof Float32Array.prototype.reduceRight === \"function\" &&\n    typeof Float64Array.prototype.reduceRight === \"function\";"),
        typedArrayPrototypeReverse:f("return typeof Int8Array.prototype.reverse === \"function\" &&\n    typeof Uint8Array.prototype.reverse === \"function\" &&\n    typeof Uint8ClampedArray.prototype.reverse === \"function\" &&\n    typeof Int16Array.prototype.reverse === \"function\" &&\n    typeof Uint16Array.prototype.reverse === \"function\" &&\n    typeof Int32Array.prototype.reverse === \"function\" &&\n    typeof Uint32Array.prototype.reverse === \"function\" &&\n    typeof Float32Array.prototype.reverse === \"function\" &&\n    typeof Float64Array.prototype.reverse === \"function\";"),
        typedArrayPrototypeSome:f("return typeof Int8Array.prototype.some === \"function\" &&\n    typeof Uint8Array.prototype.some === \"function\" &&\n    typeof Uint8ClampedArray.prototype.some === \"function\" &&\n    typeof Int16Array.prototype.some === \"function\" &&\n    typeof Uint16Array.prototype.some === \"function\" &&\n    typeof Int32Array.prototype.some === \"function\" &&\n    typeof Uint32Array.prototype.some === \"function\" &&\n    typeof Float32Array.prototype.some === \"function\" &&\n    typeof Float64Array.prototype.some === \"function\";"),
        typedArrayPrototypeSort:f("return typeof Int8Array.prototype.sort === \"function\" &&\n    typeof Uint8Array.prototype.sort === \"function\" &&\n    typeof Uint8ClampedArray.prototype.sort === \"function\" &&\n    typeof Int16Array.prototype.sort === \"function\" &&\n    typeof Uint16Array.prototype.sort === \"function\" &&\n    typeof Int32Array.prototype.sort === \"function\" &&\n    typeof Uint32Array.prototype.sort === \"function\" &&\n    typeof Float32Array.prototype.sort === \"function\" &&\n    typeof Float64Array.prototype.sort === \"function\";"),
        typedArrayPrototypeCopyWithin:f("return typeof Int8Array.prototype.copyWithin === \"function\" &&\n    typeof Uint8Array.prototype.copyWithin === \"function\" &&\n    typeof Uint8ClampedArray.prototype.copyWithin === \"function\" &&\n    typeof Int16Array.prototype.copyWithin === \"function\" &&\n    typeof Uint16Array.prototype.copyWithin === \"function\" &&\n    typeof Int32Array.prototype.copyWithin === \"function\" &&\n    typeof Uint32Array.prototype.copyWithin === \"function\" &&\n    typeof Float32Array.prototype.copyWithin === \"function\" &&\n    typeof Float64Array.prototype.copyWithin === \"function\";"),
        typedArrayPrototypeFind:f("return typeof Int8Array.prototype.find === \"function\" &&\n    typeof Uint8Array.prototype.find === \"function\" &&\n    typeof Uint8ClampedArray.prototype.find === \"function\" &&\n    typeof Int16Array.prototype.find === \"function\" &&\n    typeof Uint16Array.prototype.find === \"function\" &&\n    typeof Int32Array.prototype.find === \"function\" &&\n    typeof Uint32Array.prototype.find === \"function\" &&\n    typeof Float32Array.prototype.find === \"function\" &&\n    typeof Float64Array.prototype.find === \"function\";"),
        typedArrayPrototypeFindIndex:f("return typeof Int8Array.prototype.findIndex === \"function\" &&\n    typeof Uint8Array.prototype.findIndex === \"function\" &&\n    typeof Uint8ClampedArray.prototype.findIndex === \"function\" &&\n    typeof Int16Array.prototype.findIndex === \"function\" &&\n    typeof Uint16Array.prototype.findIndex === \"function\" &&\n    typeof Int32Array.prototype.findIndex === \"function\" &&\n    typeof Uint32Array.prototype.findIndex === \"function\" &&\n    typeof Float32Array.prototype.findIndex === \"function\" &&\n    typeof Float64Array.prototype.findIndex === \"function\";"),
        typedArrayPrototypeFill:f("return typeof Int8Array.prototype.fill === \"function\" &&\n    typeof Uint8Array.prototype.fill === \"function\" &&\n    typeof Uint8ClampedArray.prototype.fill === \"function\" &&\n    typeof Int16Array.prototype.fill === \"function\" &&\n    typeof Uint16Array.prototype.fill === \"function\" &&\n    typeof Int32Array.prototype.fill === \"function\" &&\n    typeof Uint32Array.prototype.fill === \"function\" &&\n    typeof Float32Array.prototype.fill === \"function\" &&\n    typeof Float64Array.prototype.fill === \"function\";"),
        typedArrayPrototypeKeys:f("return typeof Int8Array.prototype.keys === \"function\" &&\n    typeof Uint8Array.prototype.keys === \"function\" &&\n    typeof Uint8ClampedArray.prototype.keys === \"function\" &&\n    typeof Int16Array.prototype.keys === \"function\" &&\n    typeof Uint16Array.prototype.keys === \"function\" &&\n    typeof Int32Array.prototype.keys === \"function\" &&\n    typeof Uint32Array.prototype.keys === \"function\" &&\n    typeof Float32Array.prototype.keys === \"function\" &&\n    typeof Float64Array.prototype.keys === \"function\";"),
        typedArrayPrototypeValues:f("return typeof Int8Array.prototype.values === \"function\" &&\n    typeof Uint8Array.prototype.values === \"function\" &&\n    typeof Uint8ClampedArray.prototype.values === \"function\" &&\n    typeof Int16Array.prototype.values === \"function\" &&\n    typeof Uint16Array.prototype.values === \"function\" &&\n    typeof Int32Array.prototype.values === \"function\" &&\n    typeof Uint32Array.prototype.values === \"function\" &&\n    typeof Float32Array.prototype.values === \"function\" &&\n    typeof Float64Array.prototype.values === \"function\";"),
        typedArrayPrototypeEntries:f("return typeof Int8Array.prototype.entries === \"function\" &&\n    typeof Uint8Array.prototype.entries === \"function\" &&\n    typeof Uint8ClampedArray.prototype.entries === \"function\" &&\n    typeof Int16Array.prototype.entries === \"function\" &&\n    typeof Uint16Array.prototype.entries === \"function\" &&\n    typeof Int32Array.prototype.entries === \"function\" &&\n    typeof Uint32Array.prototype.entries === \"function\" &&\n    typeof Float32Array.prototype.entries === \"function\" &&\n    typeof Float64Array.prototype.entries === \"function\";"),
        typedArrayPrototypeSymbolIterator:f("return typeof Int8Array.prototype[Symbol.iterator] === \"function\" &&\n    typeof Uint8Array.prototype[Symbol.iterator] === \"function\" &&\n    typeof Uint8ClampedArray.prototype[Symbol.iterator] === \"function\" &&\n    typeof Int16Array.prototype[Symbol.iterator] === \"function\" &&\n    typeof Uint16Array.prototype[Symbol.iterator] === \"function\" &&\n    typeof Int32Array.prototype[Symbol.iterator] === \"function\" &&\n    typeof Uint32Array.prototype[Symbol.iterator] === \"function\" &&\n    typeof Float32Array.prototype[Symbol.iterator] === \"function\" &&\n    typeof Float64Array.prototype[Symbol.iterator] === \"function\";"),
        typedArraySymbolSpecies:f("return typeof Int8Array[Symbol.species] === \"function\" &&\n    typeof Uint8Array[Symbol.species] === \"function\" &&\n    typeof Uint8ClampedArray[Symbol.species] === \"function\" &&\n    typeof Int16Array[Symbol.species] === \"function\" &&\n    typeof Uint16Array[Symbol.species] === \"function\" &&\n    typeof Int32Array[Symbol.species] === \"function\" &&\n    typeof Uint32Array[Symbol.species] === \"function\" &&\n    typeof Float32Array[Symbol.species] === \"function\" &&\n    typeof Float64Array[Symbol.species] === \"function\";")
      },
      "Map": { // test+
        basicFunctionality:f("var key = {};\n        var map = new Map();\n\n        map.set(key, 123);\n\n        return map.has(key) && map.get(key) === 123;"),
        constructorArguments:f("var key1 = {};\n        var key2 = {};\n        var map = new Map([[key1, 123], [key2, 456]]);\n\n        return map.has(key1) && map.get(key1) === 123 &&\n               map.has(key2) && map.get(key2) === 456;"),
        constructorRequiresNew:f("new Map();\n        try {\n          Map();\n          return false;\n        } catch(e) {\n          return true;\n        }"),
        constructorAcceptsNull:f("new Map(null);\n        return true;"),
        constructorInvokesSet:f("var passed = false;\n        var _set = Map.prototype.set;\n\n        Map.prototype.set = function(k, v) {\n          passed = true;\n        };\n\n        new Map([ [1, 2] ]);\n        Map.prototype.set = _set;\n\n        return passed;"),
        iteratorClosing:f("var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          new Map(iter);\n        } catch(e){}\n        return closed;"),
        mapPrototypeSetReturnsThis:f("var map = new Map();\n        return map.set(0, 0) === map;"),
        _0KeyConvertsTo0:f("var map = new Map();\n        map.set(-0, \"foo\");\n        var k;\n        map.forEach(function (value, key) {\n          k = 1 / key;\n        });\n        return k === Infinity && map.get(+0) == \"foo\";"),
        mapPrototypeSize:f("var key = {};\n        var map = new Map();\n\n        map.set(key, 123);\n\n        return map.size === 1;"),
        mapPrototypeDelete:f("return typeof Map.prototype.delete === \"function\";"),
        mapPrototypeClear:f("return typeof Map.prototype.clear === \"function\";"),
        mapPrototypeForEach:f("return typeof Map.prototype.forEach === \"function\";"),
        mapPrototypeKeys:f("return typeof Map.prototype.keys === \"function\";"),
        mapPrototypeValues:f("return typeof Map.prototype.values === \"function\";"),
        mapPrototypeEntries:f("return typeof Map.prototype.entries === \"function\";"),
        mapPrototypeSymbolIterator:f("return typeof Map.prototype[Symbol.iterator] === \"function\";"),
        mapIteratorPrototypeChain:f("// Iterator instance\n        var iterator = new Map()[Symbol.iterator]();\n        // %MapIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;"),
        mapSymbolSpecies:f("var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);\n        return 'get' in prop && Map[Symbol.species] === Map;")
      },
      "Set": { // test+
        basicFunctionality:f("var obj = {};\n        var set = new Set();\n\n        set.add(123);\n        set.add(123);\n\n        return set.has(123);"),
        constructorArguments:f("var obj1 = {};\n        var obj2 = {};\n        var set = new Set([obj1, obj2]);\n\n        return set.has(obj1) && set.has(obj2);"),
        constructorRequiresNew:f("new Set();\n        try {\n          Set();\n          return false;\n        } catch(e) {\n          return true;\n        }"),
        constructorAcceptsNull:f("new Set(null);\n        return true;"),
        constructorInvokesAdd:f("var passed = false;\n        var _add = Set.prototype.add;\n\n        Set.prototype.add = function(v) {\n          passed = true;\n        };\n\n        new Set([1]);\n        Set.prototype.add = _add;\n\n        return passed;"),
        iteratorClosing:f("var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        var add = Set.prototype.add;\n        Set.prototype.add = function(){ throw 0 };\n        try {\n          new Set(iter);\n        } catch(e){}\n        Set.prototype.add = add;\n        return closed;"),
        setPrototypeAddReturnsThis:f("var set = new Set();\n        return set.add(0) === set;"),
        _0KeyConvertsTo0:f("var set = new Set();\n        set.add(-0);\n        var k;\n        set.forEach(function (value) {\n          k = 1 / value;\n        });\n        return k === Infinity && set.has(+0);"),
        setPrototypeSize:f("var obj = {};\n        var set = new Set();\n\n        set.add(123);\n        set.add(123);\n        set.add(456);\n\n        return set.size === 2;"),
        setPrototypeDelete:f("return typeof Set.prototype.delete === \"function\";"),
        setPrototypeClear:f("return typeof Set.prototype.clear === \"function\";"),
        setPrototypeForEach:f("return typeof Set.prototype.forEach === \"function\";"),
        setPrototypeKeys:f("return typeof Set.prototype.keys === \"function\";"),
        setPrototypeValues:f("return typeof Set.prototype.values === \"function\";"),
        setPrototypeEntries:f("return typeof Set.prototype.entries === \"function\";"),
        setPrototypeSymbolIterator:f("return typeof Set.prototype[Symbol.iterator] === \"function\";"),
        setIteratorPrototypeChain:f("// Iterator instance\n        var iterator = new Set()[Symbol.iterator]();\n        // %SetIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;"),
        setSymbolSpecies:f("var prop = Object.getOwnPropertyDescriptor(Set, Symbol.species);\n        return 'get' in prop && Set[Symbol.species] === Set;")
      },
      "WeakMap": { // test+
        basicFunctionality:f("var key = {};\n        var weakmap = new WeakMap();\n\n        weakmap.set(key, 123);\n\n        return weakmap.has(key) && weakmap.get(key) === 123;"),
        constructorArguments:f("var key1 = {};\n        var key2 = {};\n        var weakmap = new WeakMap([[key1, 123], [key2, 456]]);\n\n        return weakmap.has(key1) && weakmap.get(key1) === 123 &&\n               weakmap.has(key2) && weakmap.get(key2) === 456;"),
        constructorRequiresNew:f("new WeakMap();\n        try {\n          WeakMap();\n          return false;\n        } catch(e) {\n          return true;\n        }"),
        constructorAcceptsNull:f("new WeakMap(null);\n        return true;"),
        constructorInvokesSet:f("var passed = false;\n        var _set = WeakMap.prototype.set;\n\n        WeakMap.prototype.set = function(k, v) {\n          passed = true;\n        };\n\n        new WeakMap([ [{ }, 42] ]);\n        WeakMap.prototype.set = _set;\n\n        return passed;"),
        frozenObjectsAsKeys:f("var f = Object.freeze({});\n        var m = new WeakMap;\n        m.set(f, 42);\n        return m.get(f) === 42;"),
        iteratorClosing:f("var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          new WeakMap(iter);\n        } catch(e){}\n        return closed;"),
        weakMapPrototypeSetReturnsThis:f("var weakmap = new WeakMap();\n        var key = {};\n        return weakmap.set(key, 0) === weakmap;"),
        weakMapPrototypeDelete:f("return typeof WeakMap.prototype.delete === \"function\";"),
        noWeakMapPrototypeClearMethod:f("if (!(\"clear\" in WeakMap.prototype)) {\n          return true;\n        }\n        var m = new WeakMap();\n        var key = {};\n        m.set(key, 2);\n        m.clear();\n        return m.has(key);")
      },
      "WeakSet": { // test+
        basicFunctionality:f("var obj1 = {};\n        var weakset = new WeakSet();\n\n        weakset.add(obj1);\n        weakset.add(obj1);\n\n        return weakset.has(obj1);"),
        constructorArguments:f("var obj1 = {}, obj2 = {};\n        var weakset = new WeakSet([obj1, obj2]);\n\n        return weakset.has(obj1) && weakset.has(obj2);"),
        constructorRequiresNew:f("new WeakSet();\n        try {\n          WeakSet();\n          return false;\n        } catch(e) {\n          return true;\n        }"),
        constructorAcceptsNull:f("new WeakSet(null);\n        return true;"),
        constructorInvokesAdd:f("var passed = false;\n        var _add = WeakSet.prototype.add;\n\n        WeakSet.prototype.add = function(v) {\n          passed = true;\n        };\n\n        new WeakSet([ { } ]);\n        WeakSet.prototype.add = _add;\n\n        return passed;"),
        iteratorClosing:f("var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          new WeakSet(iter);\n        } catch(e){}\n        return closed;"),
        weakSetPrototypeAddReturnsThis:f("var weakset = new WeakSet();\n        var obj = {};\n        return weakset.add(obj) === weakset;"),
        weakSetPrototypeDelete:f("return typeof WeakSet.prototype.delete === \"function\";"),
        noWeakSetPrototypeClearMethod:f("if (!(\"clear\" in WeakSet.prototype)) {\n          return true;\n        }\n        var s = new WeakSet();\n        var key = {};\n        s.add(key);\n        s.clear();\n        return s.has(key);")
      },
      "Proxy": { // test+
        constructorRequiresNew:f("new Proxy({}, {});\n        try {\n          Proxy({}, {});\n          return false;\n        } catch(e) {\n          return true;\n        }"),
        getHandler:f("var proxied = { };\n        var proxy = new Proxy(proxied, {\n          get: function (t, k, r) {\n            return t === proxied && k === \"foo\" && r === proxy && 5;\n          }\n        });\n        return proxy.foo === 5;"),
        getHandlerInstancesOfProxies:f("var proxied = { };\n        var proxy = Object.create(new Proxy(proxied, {\n          get: function (t, k, r) {\n            return t === proxied && k === \"foo\" && r === proxy && 5;\n          }\n        }));\n        return proxy.foo === 5;"),
        setHandler:f("var proxied = { };\n        var passed = false;\n        var proxy = new Proxy(proxied, {\n          set: function (t, k, v, r) {\n            passed = t === proxied && k + v === \"foobar\" && r === proxy;\n          }\n        });\n        proxy.foo = \"bar\";\n        return passed;"),
        setHandlerInstancesOfProxies:f("var proxied = { };\n        var passed = false;\n        var proxy = Object.create(new Proxy(proxied, {\n          set: function (t, k, v, r) {\n            passed = t === proxied && k + v === \"foobar\" && r === proxy;\n          }\n        }));\n        proxy.foo = \"bar\";\n        return passed;"),
        hasHandler:f("var proxied = {};\n        var passed = false;\n        \"foo\" in new Proxy(proxied, {\n          has: function (t, k) {\n            passed = t === proxied && k === \"foo\";\n          }\n        });\n        return passed;"),
        hasHandlerInstancesOfProxies:f("var proxied = {};\n        var passed = false;\n        \"foo\" in Object.create(new Proxy(proxied, {\n          has: function (t, k) {\n            passed = t === proxied && k === \"foo\";\n          }\n        }));\n        return passed;"),
        deletePropertyHandler:f("var proxied = {};\n        var passed = false;\n        delete new Proxy(proxied, {\n          deleteProperty: function (t, k) {\n            passed = t === proxied && k === \"foo\";\n          }\n        }).foo;\n        return passed;"),
        getOwnPropertyDescriptorHandler:f("var proxied = {};\n        var fakeDesc = { value: \"foo\", configurable: true };\n        var returnedDesc = Object.getOwnPropertyDescriptor(\n          new Proxy(proxied, {\n            getOwnPropertyDescriptor: function (t, k) {\n              return t === proxied && k === \"foo\" && fakeDesc;\n            }\n          }),\n          \"foo\"\n        );\n        return (returnedDesc.value     === fakeDesc.value\n          && returnedDesc.configurable === fakeDesc.configurable\n          && returnedDesc.writable     === false\n          && returnedDesc.enumerable   === false);"),
        definePropertyHandler:f("var proxied = {};\n        var passed = false;\n        Object.defineProperty(\n          new Proxy(proxied, {\n            defineProperty: function (t, k, d) {\n              passed = t === proxied && k === \"foo\" && d.value === 5;\n              return true;\n            }\n          }),\n          \"foo\",\n          { value: 5, configurable: true }\n        );\n        return passed;"),
        getPrototypeOfHandler:f("var proxied = {};\n        var fakeProto = {};\n        var proxy = new Proxy(proxied, {\n          getPrototypeOf: function (t) {\n            return t === proxied && fakeProto;\n          }\n        });\n        return Object.getPrototypeOf(proxy) === fakeProto;"),
        setPrototypeOfHandler:f("var proxied = {};\n        var newProto = {};\n        var passed = false;\n        Object.setPrototypeOf(\n          new Proxy(proxied, {\n            setPrototypeOf: function (t, p) {\n              passed = t === proxied && p === newProto;\n              return true;\n            }\n          }),\n          newProto\n        );\n        return passed;"),
        isExtensibleHandler:f("var proxied = {};\n        var passed = false;\n        Object.isExtensible(\n          new Proxy(proxied, {\n            isExtensible: function (t) {\n              passed = t === proxied; return true;\n            }\n          })\n        );\n        return passed;"),
        preventExtensionsHandler:f("var proxied = {};\n        var passed = false;\n        Object.preventExtensions(\n          new Proxy(proxied, {\n            preventExtensions: function (t) {\n              passed = t === proxied;\n              return Object.preventExtensions(proxied);\n            }\n          })\n        );\n        return passed;"),
        enumerateHandler:f("var proxied = {};\n        var passed = false;\n        for (var i in\n          new Proxy(proxied, {\n            enumerate: function (t) {\n              passed = t === proxied;\n              return {\n                next: function(){ return { done: true, value: null };}\n              };\n            }\n          })\n        ) { }\n        return passed;"),
        ownKeysHandler:f("var proxied = {};\n        var passed = false;\n        Object.keys(\n          new Proxy(proxied, {\n            ownKeys: function (t) {\n              passed = t === proxied; return [];\n            }\n          })\n        );\n        return passed;"),
        applyHandler:f("var proxied = function(){};\n        var passed = false;\n        var host = {\n          method: new Proxy(proxied, {\n            apply: function (t, thisArg, args) {\n              passed = t === proxied && thisArg === host && args + \"\" === \"foo,bar\";\n            }\n          })\n        };\n        host.method(\"foo\", \"bar\");\n        return passed;"),
        constructHandler:f("var proxied = function(){};\n        var passed = false;\n        new new Proxy(proxied, {\n          construct: function (t, args) {\n            passed = t === proxied && args + \"\" === \"foo,bar\";\n            return {};\n          }\n        })(\"foo\",\"bar\");\n        return passed;"),
        proxyRevocable:f("var obj = Proxy.revocable({}, { get: function() { return 5; } });\n        var passed = (obj.proxy.foo === 5);\n        obj.revoke();\n        try {\n          obj.proxy.foo;\n        } catch(e) {\n          passed &= e instanceof TypeError;\n        }\n        return passed;"),
        arrayIsArraySupport:f("return Array.isArray(new Proxy([], {}));"),
        jSONStringifySupport:f("return JSON.stringify(new Proxy(['foo'], {})) === '[\"foo\"]';")
      },
      "Reflect": { // test+
        reflectGet:f("return Reflect.get({ qux: 987 }, \"qux\") === 987;"),
        reflectSet:f("var obj = {};\n        Reflect.set(obj, \"quux\", 654);\n        return obj.quux === 654;"),
        reflectHas:f("return Reflect.has({ qux: 987 }, \"qux\");"),
        reflectDeleteProperty:f("var obj = { bar: 456 };\n        Reflect.deleteProperty(obj, \"bar\");\n        return !(\"bar\" in obj);"),
        reflectGetOwnPropertyDescriptor:f("var obj = { baz: 789 };\n        var desc = Reflect.getOwnPropertyDescriptor(obj, \"baz\");\n        return desc.value === 789 &&\n          desc.configurable && desc.writable && desc.enumerable;"),
        reflectDefineProperty:f("var obj = {};\n        Reflect.defineProperty(obj, \"foo\", { value: 123 });\n        return obj.foo === 123 &&\n          Reflect.defineProperty(Object.freeze({}), \"foo\", { value: 123 }) === false;"),
        reflectGetPrototypeOf:f("return Reflect.getPrototypeOf([]) === Array.prototype;"),
        reflectSetPrototypeOf:f("var obj = {};\n        Reflect.setPrototypeOf(obj, Array.prototype);\n        return obj instanceof Array;"),
        reflectIsExtensible:f("return Reflect.isExtensible({}) &&\n          !Reflect.isExtensible(Object.preventExtensions({}));"),
        reflectPreventExtensions:f("var obj = {};\n        Reflect.preventExtensions(obj);\n        return !Object.isExtensible(obj);"),
        reflectEnumerate:f("var obj = { foo: 1, bar: 2 };\n        var iterator = Reflect.enumerate(obj);\n        var passed = 1;\n        if (typeof Symbol === 'function' && 'iterator' in Symbol) {\n          passed &= Symbol.iterator in iterator;\n        }\n        var item = iterator.next();\n        passed &= item.value === \"foo\" && item.done === false;\n        item = iterator.next();\n        passed &= item.value === \"bar\" && item.done === false;\n        item = iterator.next();\n        passed &= item.value === undefined && item.done === true;\n        return passed === 1;"),
        reflectOwnKeysStringKeys:f("var obj = Object.create({ C: true });\n        obj.A = true;\n        Object.defineProperty(obj, 'B', { value: true, enumerable: false });\n\n        return Reflect.ownKeys(obj).sort() + '' === \"A,B\";"),
        reflectOwnKeysSymbolKeys:f("var s1 = Symbol(), s2 = Symbol(), s3 = Symbol();\n        var proto = {};\n        proto[s1] = true;\n        var obj = Object.create(proto);\n        obj[s2] = true;\n        Object.defineProperty(obj, s3, { value: true, enumerable: false });\n\n        var keys = Reflect.ownKeys(obj);\n        return keys.indexOf(s2) >-1 && keys.indexOf(s3) >-1 && keys.length === 2;"),
        reflectApply:f("return Reflect.apply(Array.prototype.push, [1,2], [3,4,5]) === 5;"),
        reflectConstruct:f("return Reflect.construct(function(a, b, c) {\n          this.qux = a + b + c;\n        }, [\"foo\", \"bar\", \"baz\"]).qux === \"foobarbaz\";"),
        reflectConstructSetsNewTargetMetaProperty:f("return Reflect.construct(function(a, b, c) {\n          if (new.target === Object) {\n            this.qux = a + b + c;\n          }\n        }, [\"foo\", \"bar\", \"baz\"], Object).qux === \"foobarbaz\";"),
        reflectConstructCreatesInstanceFromNewTargetArgument:f("function F(){}\n        return Reflect.construct(function(){}, [], F) instanceof F;")
      },
      "Promise": { // test+
        basicFunctionality:a("var p1 = new Promise(function(resolve, reject) { resolve(\"foo\"); });\n        var p2 = new Promise(function(resolve, reject) { reject(\"quux\"); });\n        var score = 0;\n\n        function thenFn(result)  { score += (result === \"foo\");  check(); }\n        function catchFn(result) { score += (result === \"quux\"); check(); }\n        function shouldNotRun(result)  { score = -Infinity;   }\n\n        p1.then(thenFn, shouldNotRun);\n        p2.then(shouldNotRun, catchFn);\n        p1.catch(shouldNotRun);\n        p2.catch(catchFn);\n\n        p1.then(function() {\n          // Promise.prototype.then() should return a new Promise\n          score += p1.then() !== p1;\n          check();\n        });\n\n        function check() {\n          if (score === 4) asyncTestPassed();\n        }"),
        constructorRequiresNew:f("new Promise(function(){});\n        try {\n          Promise(function(){});\n          return false;\n        } catch(e) {\n          return true;\n        }"),
        promiseAll:a("var fulfills = Promise.all([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,100,\"bar\"); }),\n        ]);\n        var rejects = Promise.all([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 100,\"qux\"); }),\n        ]);\n        var score = 0;\n        fulfills.then(function(result) { score += (result + \"\" === \"foo,bar\"); check(); });\n        rejects.catch(function(result) { score += (result === \"qux\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }"),
        promiseAllGenericIterables:a("var fulfills = Promise.all(global.__createIterableObject([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,100,\"bar\"); }),\n        ]));\n        var rejects = Promise.all(global.__createIterableObject([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 100,\"qux\"); }),\n        ]));\n        var score = 0;\n        fulfills.then(function(result) { score += (result + \"\" === \"foo,bar\"); check(); });\n        rejects.catch(function(result) { score += (result === \"qux\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }"),
        promiseRace:a("var fulfills = Promise.race([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 300,\"bar\"); }),\n        ]);\n        var rejects = Promise.race([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,300,\"qux\"); }),\n        ]);\n        var score = 0;\n        fulfills.then(function(result) { score += (result === \"foo\"); check(); });\n        rejects.catch(function(result) { score += (result === \"baz\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }"),
        promiseRaceGenericIterables:a("var fulfills = Promise.race(global.__createIterableObject([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 300,\"bar\"); }),\n        ]));\n        var rejects = Promise.race(global.__createIterableObject([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,300,\"qux\"); }),\n        ]));\n        var score = 0;\n        fulfills.then(function(result) { score += (result === \"foo\"); check(); });\n        rejects.catch(function(result) { score += (result === \"baz\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }"),
        promiseSymbolSpecies:f("var prop = Object.getOwnPropertyDescriptor(Promise, Symbol.species);\n        return 'get' in prop && Promise[Symbol.species] === Promise;")
      },
      "Symbol": { // test+
        basicFunctionality:f("var object = {};\n        var symbol = Symbol();\n        var value = {};\n        object[symbol] = value;\n        return object[symbol] === value;"),
        typeofSupport:f("return typeof Symbol() === \"symbol\";"),
        symbolKeysAreHiddenToPreES6Code:f("var object = {};\n        var symbol = Symbol();\n        object[symbol] = 1;\n\n        for (var x in object){}\n        var passed = !x;\n\n        if (Object.keys && Object.getOwnPropertyNames) {\n          passed &= Object.keys(object).length === 0\n            && Object.getOwnPropertyNames(object).length === 0;\n        }\n\n        return passed;"),
        objectDefinePropertySupport:f("var object = {};\n        var symbol = Symbol();\n        var value = {};\n\n        if (Object.defineProperty) {\n          Object.defineProperty(object, symbol, { value: value });\n          return object[symbol] === value;\n        }\n\n        return passed;"),
        cannotCoerceToStringOrNumber:f("var symbol = Symbol();\n\n        try {\n          symbol + \"\";\n          return false;\n        }\n        catch(e) {}\n\n        try {\n          symbol + 0;\n          return false;\n        } catch(e) {}\n\n        return true;"),
        canConvertWithString:f("return String(Symbol(\"foo\")) === \"Symbol(foo)\";"),
        newSymbolThrows:f("var symbol = Symbol();\n        try {\n          new Symbol();\n        } catch(e) {\n          return true;\n        }"),
        objectSymbol:f("var symbol = Symbol();\n        var symbolObject = Object(symbol);\n\n        return typeof symbolObject === \"object\" &&\n          symbolObject instanceof Symbol &&\n          symbolObject == symbol &&\n          symbolObject !== symbol &&\n          symbolObject.valueOf() === symbol;"),
        jSONStringifyIgnoresSymbols:f("var object = {foo: Symbol()};\n        object[Symbol()] = 1;\n        var array = [Symbol()];\n        return JSON.stringify(object) === '{}' && JSON.stringify(array) === '[null]' && JSON.stringify(Symbol()) === undefined;"),
        globalSymbolRegistry:f("var symbol = Symbol.for('foo');\n        return Symbol.for('foo') === symbol &&\n           Symbol.keyFor(symbol) === 'foo';")
      },
      "well-known symbols": { // test+
        symbolHasInstance:f("var passed = false;\n        var obj = { foo: true };\n        var C = function(){};\n        Object.defineProperty(C, Symbol.hasInstance, {\n          value: function(inst) { passed = inst.foo; return false; }\n        });\n        obj instanceof C;\n        return passed;"),
        symbolIsConcatSpreadable:f("var a = [], b = [];\n        b[Symbol.isConcatSpreadable] = false;\n        a = a.concat(b);\n        return a[0] === b;"),
        symbolIteratorExistence:f("return \"iterator\" in Symbol;"),
        symbolIteratorArgumentsObject:f("return (function() {\n          return typeof arguments[Symbol.iterator] === 'function'\n            && Object.hasOwnProperty.call(arguments, Symbol.iterator);\n        }());"),
        symbolSpeciesExistence:f("return \"species\" in Symbol;"),
        symbolSpeciesArrayPrototypeConcat:f("var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\n            return { foo: 1 };\n        };\n        return Array.prototype.concat.call(obj, []).foo === 1;"),
        symbolSpeciesArrayPrototypeFilter:f("var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\n            return { foo: 1 };\n        };\n        return Array.prototype.filter.call(obj, Boolean).foo === 1;"),
        symbolSpeciesArrayPrototypeMap:f("var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\n            return { foo: 1 };\n        };\n        return Array.prototype.map.call(obj, Boolean).foo === 1;"),
        symbolSpeciesArrayPrototypeSlice:f("var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\n            return { foo: 1 };\n        };\n        return Array.prototype.slice.call(obj, 0).foo === 1;"),
        symbolSpeciesArrayPrototypeSplice:f("var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\n            return { foo: 1 };\n        };\n        return Array.prototype.splice.call(obj, 0).foo === 1;"),
        symbolSpeciesRegExpPrototypeSymbolSplit:f("var passed = false;\n        var obj = { constructor: {} };\n        obj[Symbol.split] = RegExp.prototype[Symbol.split];\n        obj.constructor[Symbol.species] = function() {\n          passed = true;\n          return /./;\n        };\n        \"\".split(obj);\n        return passed;"),
        symbolReplace:f("var O = {};\n        O[Symbol.replace] = function(){\n          return 42;\n        };\n        return ''.replace(O) === 42;"),
        symbolSearch:f("var O = {};\n        O[Symbol.search] = function(){\n          return 42;\n        };\n        return ''.search(O) === 42;"),
        symbolSplit:f("var O = {};\n        O[Symbol.split] = function(){\n          return 42;\n        };\n        return ''.split(O) === 42;"),
        symbolMatch:f("var O = {};\n        O[Symbol.match] = function(){\n          return 42;\n        };\n        return ''.match(O) === 42;"),
        symbolMatchRegExpConstructor:f("var re = /./;\n        re[Symbol.match] = false;\n        var foo = {constructor: RegExp};\n        foo[Symbol.match] = true;\n        return RegExp(re) !== re && RegExp(foo) === foo;"),
        symbolMatchStringPrototypeStartsWith:f("var re = /./;\n        try {\n          '/./'.startsWith(re);\n        } catch(e){\n          re[Symbol.match] = false;\n          return '/./'.startsWith(re);\n        }"),
        symbolMatchStringPrototypeEndsWith:f("var re = /./;\n        try {\n          '/./'.endsWith(re);\n        } catch(e){\n          re[Symbol.match] = false;\n          return '/./'.endsWith(re);\n        }"),
        symbolMatchStringPrototypeIncludes:f("var re = /./;\n        try {\n          '/./'.includes(re);\n        } catch(e){\n          re[Symbol.match] = false;\n          return '/./'.includes(re);\n        }"),
        symbolToPrimitive:f("var a = {}, b = {}, c = {};\n        var passed = 0;\n        a[Symbol.toPrimitive] = function(hint) { passed += hint === \"number\";  return 0; };\n        b[Symbol.toPrimitive] = function(hint) { passed += hint === \"string\";  return 0; };\n        c[Symbol.toPrimitive] = function(hint) { passed += hint === \"default\"; return 0; };\n\n        a >= 0;\n        b in {};\n        c == 0;\n        return passed === 3;"),
        symbolToStringTag:f("var a = {};\n        a[Symbol.toStringTag] = \"foo\";\n        return (a + \"\") === \"[object foo]\";"),
        symbolToStringTagMiscBuiltIns:f("var s = Symbol.toStringTag;\n        return Math[s] === \"Math\"\n          && JSON[s] === \"JSON\";"),
        symbolUnscopables:f("var a = { foo: 1, bar: 2 };\n        a[Symbol.unscopables] = { bar: true };\n        with (a) {\n          return foo === 1 && typeof bar === \"undefined\";\n        }")
      }
    },
    builtInExtensions: {

      "Object static methods": { // test+
        objectAssign:f("var o = Object.assign({a:true}, {b:true}, {c:true});\n        return \"a\" in o && \"b\" in o && \"c\" in o;"),
        objectIs:f("return typeof Object.is === 'function' &&\n          Object.is(NaN, NaN) &&\n         !Object.is(-0, 0);"),
        objectGetOwnPropertySymbols:f("var o = {};\n        var sym = Symbol(), sym2 = Symbol(), sym3 = Symbol();\n        o[sym]  = true;\n        o[sym2] = true;\n        o[sym3] = true;\n        var result = Object.getOwnPropertySymbols(o);\n        return result[0] === sym\n          && result[1] === sym2\n          && result[2] === sym3;"),
        objectSetPrototypeOf:f("return Object.setPrototypeOf({}, Array.prototype) instanceof Array;")
      },
      "function \"name\" property": { // test+
        functionStatements:f("function foo(){};\n        return foo.name === 'foo' &&\n          (function(){}).name === '';"),
        functionExpressions:f("return (function foo(){}).name === 'foo' &&\n          (function(){}).name === '';"),
        newFunction:f("return (new Function).name === \"anonymous\";"),
        boundFunctions:f("function foo() {};\n        return foo.bind({}).name === \"bound foo\" &&\n          (function(){}).bind({}).name === \"bound \";"),
        variablesFunction:f("var foo = function() {};\n        var bar = function baz() {};\n        return foo.name === \"foo\" && bar.name === \"baz\";"),
        objectMethodsFunction:f("var o = { foo: function(){}, bar: function baz(){}};\n        o.qux = function(){};\n        return o.foo.name === \"foo\" &&\n               o.bar.name === \"baz\" &&\n               o.qux.name === \"\";"),
        accessorProperties:f("var o = { get foo(){}, set foo(x){} };\n        var descriptor = Object.getOwnPropertyDescriptor(o, \"foo\");\n        return descriptor.get.name === \"get foo\" &&\n               descriptor.set.name === \"set foo\";"),
        shorthandMethods:f("var o = { foo(){} };\n        return o.foo.name === \"foo\";"),
        shorthandMethodsNoLexicalBinding:f("var f = \"foo\";\n        return ({f() { return f; }}).f() === \"foo\";"),
        symbolKeyedMethods:f("var sym1 = Symbol(\"foo\");\n        var sym2 = Symbol();\n        var o = {\n          [sym1]: function(){},\n          [sym2]: function(){}\n        };\n\n        return o[sym1].name === \"[foo]\" &&\n               o[sym2].name === \"\";"),
        classStatements:f("class foo {};\n        class bar { static name() {} };\n        return foo.name === \"foo\" &&\n          typeof bar.name === \"function\";"),
        classExpressions:f("return class foo {}.name === \"foo\" &&\n          typeof class bar { static name() {} }.name === \"function\";"),
        variablesClass:f("var foo = class {};\n        var bar = class baz {};\n        var qux = class { static name() {} };\n        return foo.name === \"foo\" &&\n               bar.name === \"baz\" &&\n               typeof qux.name === \"function\";"),
        objectMethodsClass:f("var o = { foo: class {}, bar: class baz {}};\n        o.qux = class {};\n        return o.foo.name === \"foo\" &&\n               o.bar.name === \"baz\" &&\n               o.qux.name === \"\";"),
        classPrototypeMethods:f("class C { foo(){} };\n        return (new C).foo.name === \"foo\";"),
        classStaticMethods:f("class C { static foo(){} };\n        return C.foo.name === \"foo\";"),
        isnTWritableIsConfigurable:f("var descriptor = Object.getOwnPropertyDescriptor(function f(){},\"name\");\n        return descriptor.enumerable   === false &&\n               descriptor.writable     === false &&\n               descriptor.configurable === true;")
      },
      "String static methods": { // test+
        stringRaw:f("return typeof String.raw === 'function';"),
        stringFromCodePoint:f("return typeof String.fromCodePoint === 'function';")
      },
      "String.prototype methods": { // test+
        stringPrototypeCodePointAt:f("return typeof String.prototype.codePointAt === 'function';"),
        stringPrototypeNormalize:f("return typeof String.prototype.normalize === \"function\"\n          && \"c\\u0327\\u0301\".normalize(\"NFC\") === \"\\u1e09\"\n          && \"\\u1e09\".normalize(\"NFD\") === \"c\\u0327\\u0301\";"),
        stringPrototypeRepeat:f("return typeof String.prototype.repeat === 'function'\n          && \"foo\".repeat(3) === \"foofoofoo\";"),
        stringPrototypeStartsWith:f("return typeof String.prototype.startsWith === 'function'\n          && \"foobar\".startsWith(\"foo\");"),
        stringPrototypeEndsWith:f("return typeof String.prototype.endsWith === 'function'\n          && \"foobar\".endsWith(\"bar\");"),
        stringPrototypeIncludes:f("return typeof String.prototype.includes === 'function'\n          && \"foobar\".includes(\"oba\");"),
        stringPrototypeSymbolIterator:f("return typeof String.prototype[Symbol.iterator] === 'function';"),
        stringIteratorPrototypeChain:f("// Iterator instance\n        var iterator = ''[Symbol.iterator]();\n        // %StringIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;")
      },
      "RegExp.prototype properties": { // test+
        regExpPrototypeFlags:f("return /./igm.flags === \"gim\" && /./.flags === \"\";"),
        regExpPrototypeSymbolMatch:f("return typeof RegExp.prototype[Symbol.match] === 'function';"),
        regExpPrototypeSymbolReplace:f("return typeof RegExp.prototype[Symbol.replace] === 'function';"),
        regExpPrototypeSymbolSplit:f("return typeof RegExp.prototype[Symbol.split] === 'function';"),
        regExpPrototypeSymbolSearch:f("return typeof RegExp.prototype[Symbol.search] === 'function';"),
        regExpSymbolSpecies:f("var prop = Object.getOwnPropertyDescriptor(RegExp, Symbol.species);\n        return 'get' in prop && RegExp[Symbol.species] === RegExp;")
      },
      "Array static methods": { // test+
        arrayFromArrayLikeObjects:f("return Array.from({ 0: \"foo\", 1: \"bar\", length: 2 }) + '' === \"foo,bar\";"),
        arrayFromGeneratorInstances:f("var iterable = (function*(){ yield 1; yield 2; yield 3; }());\n        return Array.from(iterable) + '' === \"1,2,3\";"),
        arrayFromGenericIterables:f("var iterable = global.__createIterableObject([1, 2, 3]);\n        return Array.from(iterable) + '' === \"1,2,3\";"),
        arrayFromInstancesOfGenericIterables:f("var iterable = global.__createIterableObject([1, 2, 3]);\n        return Array.from(Object.create(iterable)) + '' === \"1,2,3\";"),
        arrayFromMapFunctionArrayLikeObjects:f("return Array.from({ 0: \"foo\", 1: \"bar\", length: 2 }, function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1\";"),
        arrayFromMapFunctionGeneratorInstances:f("var iterable = (function*(){ yield \"foo\"; yield \"bar\"; yield \"bal\"; }());\n        return Array.from(iterable, function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1,bald2\";"),
        arrayFromMapFunctionGenericIterables:f("var iterable = global.__createIterableObject([\"foo\", \"bar\", \"bal\"]);\n        return Array.from(iterable, function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1,bald2\";"),
        arrayFromMapFunctionInstancesOfIterables:f("var iterable = global.__createIterableObject([\"foo\", \"bar\", \"bal\"]);\n        return Array.from(Object.create(iterable), function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1,bald2\";"),
        arrayFromIteratorClosing:f("var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          Array.from(iter, function() { throw 42 });\n        } catch(e){}\n        return closed;"),
        arrayOf:f("return typeof Array.of === 'function' &&\n          Array.of(2)[0] === 2;"),
        arraySymbolSpecies:f("var prop = Object.getOwnPropertyDescriptor(Array, Symbol.species);\n        return 'get' in prop && Array[Symbol.species] === Array;")
      },
      "Array.prototype methods": { // test+
        arrayPrototypeCopyWithin:f("return typeof Array.prototype.copyWithin === 'function';"),
        arrayPrototypeFind:f("return typeof Array.prototype.find === 'function';"),
        arrayPrototypeFindIndex:f("return typeof Array.prototype.findIndex === 'function';"),
        arrayPrototypeFill:f("return typeof Array.prototype.fill === 'function';"),
        arrayPrototypeKeys:f("return typeof Array.prototype.keys === 'function';"),
        arrayPrototypeValues:f("return typeof Array.prototype.values === 'function';"),
        arrayPrototypeEntries:f("return typeof Array.prototype.entries === 'function';"),
        arrayPrototypeSymbolIterator:f("return typeof Array.prototype[Symbol.iterator] === 'function';"),
        arrayIteratorPrototypeChain:f("// Iterator instance\n        var iterator = [][Symbol.iterator]();\n        // %ArrayIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;"),
        arrayPrototypeSymbolUnscopables:f("var unscopables = Array.prototype[Symbol.unscopables];\n        if (!unscopables) {\n          return false;\n        }\n        var ns = \"find,findIndex,fill,copyWithin,entries,keys,values\".split(\",\");\n        for (var i = 0; i < ns.length; i++) {\n          if (Array.prototype[ns[i]] && !unscopables[ns[i]]) return false;\n        }\n        return true;")
      },
      "Number properties": { // test+
        numberIsFinite:f("return typeof Number.isFinite === 'function';"),
        numberIsInteger:f("return typeof Number.isInteger === 'function';"),
        numberIsSafeInteger:f("return typeof Number.isSafeInteger === 'function';"),
        numberIsNaN:f("return typeof Number.isNaN === 'function';"),
        numberEPSILON:f("return typeof Number.EPSILON === 'number';"),
        numberMIN_SAFE_INTEGER:f("return typeof Number.MIN_SAFE_INTEGER === 'number';"),
        numberMAX_SAFE_INTEGER:f("return typeof Number.MAX_SAFE_INTEGER === 'number';")
      },
      "Math methods": { // test+
        mathClz32:f("return typeof Math.clz32 === \"function\";"),
        mathImul:f("return typeof Math.imul === \"function\";"),
        mathSign:f("return typeof Math.sign === \"function\";"),
        mathLog10:f("return typeof Math.log10 === \"function\";"),
        mathLog2:f("return typeof Math.log2 === \"function\";"),
        mathLog1p:f("return typeof Math.log1p === \"function\";"),
        mathExpm1:f("return typeof Math.expm1 === \"function\";"),
        mathCosh:f("return typeof Math.cosh === \"function\";"),
        mathSinh:f("return typeof Math.sinh === \"function\";"),
        mathTanh:f("return typeof Math.tanh === \"function\";"),
        mathAcosh:f("return typeof Math.acosh === \"function\";"),
        mathAsinh:f("return typeof Math.asinh === \"function\";"),
        mathAtanh:f("return typeof Math.atanh === \"function\";"),
        mathTrunc:f("return typeof Math.trunc === \"function\";"),
        mathFround:f("return typeof Math.fround === \"function\";"),
        mathCbrt:f("return typeof Math.cbrt === \"function\";"),
        mathHypot:f("return Math.hypot() === 0 &&\n          Math.hypot(1) === 1 &&\n          Math.hypot(9, 12, 20) === 25 &&\n          Math.hypot(27, 36, 60, 100) === 125;")
      }
    },
    subclassing: {

      "Array is subclassable": { // test+
        lengthPropertyAccessing:f("class C extends Array {}\n        var c = new C();\n        var len1 = c.length;\n        c[2] = 'foo';\n        var len2 = c.length;\n        return len1 === 0 && len2 === 3;"),
        lengthPropertySetting:f("class C extends Array {}\n        var c = new C();\n        c[2] = 'foo';\n        c.length = 1;\n        return c.length === 1 && !(2 in c);"),
        correctPrototypeChain:f("class C extends Array {}\n        var c = new C();\n        return c instanceof C && c instanceof Array && Object.getPrototypeOf(C) === Array;"),
        arrayIsArraySupport:f("class C extends Array {}\n        return Array.isArray(new C());"),
        arrayPrototypeConcat:f("class C extends Array {}\n        var c = new C();\n        return c.concat(1) instanceof C;"),
        arrayPrototypeFilter:f("class C extends Array {}\n        var c = new C();\n        return c.filter(Boolean) instanceof C;"),
        arrayPrototypeMap:f("class C extends Array {}\n        var c = new C();\n        return c.map(Boolean) instanceof C;"),
        arrayPrototypeSlice:f("class C extends Array {}\n        var c = new C();\n        c.push(2,4,6);\n        return c.slice(1,2) instanceof C;"),
        arrayPrototypeSplice:f("class C extends Array {}\n        var c = new C();\n        c.push(2,4,6);\n        return c.splice(1,2) instanceof C;"),
        arrayFrom:f("class C extends Array {}\n        return C.from({ length: 0 }) instanceof C;"),
        arrayOf:f("class C extends Array {}\n        return C.of(0) instanceof C;")
      },
      "RegExp is subclassable": { // test+
        basicFunctionality:f("class R extends RegExp {}\n        var r = new R(\"baz\",\"g\");\n        return r.global && r.source === \"baz\";"),
        correctPrototypeChain:f("class R extends RegExp {}\n        var r = new R(\"baz\",\"g\");\n        return r instanceof R && r instanceof RegExp && Object.getPrototypeOf(R) === RegExp;"),
        regExpPrototypeExec:f("class R extends RegExp {}\n        var r = new R(\"baz\",\"g\");\n        return r.exec(\"foobarbaz\")[0] === \"baz\" && r.lastIndex === 9;"),
        regExpPrototypeTest:f("class R extends RegExp {}\n        var r = new R(\"baz\");\n        return r.test(\"foobarbaz\");")
      },
      "Function is subclassable": { // test+
        canBeCalled:f("class C extends Function {}\n        var c = new C(\"return 'foo';\");\n        return c() === 'foo';"),
        correctPrototypeChain:f("class C extends Function {}\n        var c = new C(\"return 'foo';\");\n        return c instanceof C && c instanceof Function && Object.getPrototypeOf(C) === Function;"),
        canBeUsedWithNew:f("class C extends Function {}\n        var c = new C(\"this.bar = 2;\");\n        c.prototype.baz = 3;\n        return new c().bar === 2 && new c().baz === 3;"),
        functionPrototypeCall:f("class C extends Function {}\n        var c = new C(\"x\", \"return this.bar + x;\");\n        return c.call({bar:1}, 2) === 3;"),
        functionPrototypeApply:f("class C extends Function {}\n        var c = new C(\"x\", \"return this.bar + x;\");\n        return c.apply({bar:1}, [2]) === 3;"),
        functionPrototypeBind:f("class C extends Function {}\n        var c = new C(\"x\", \"y\", \"return this.bar + x + y;\").bind({bar:1}, 2);\n        return c(6) === 9 && c instanceof C;")
      },
      "Promise is subclassable": { // test+
        basicFunctionality:a("class P extends Promise {}\n        var p1 = new P(function(resolve, reject) { resolve(\"foo\"); });\n        var p2 = new P(function(resolve, reject) { reject(\"quux\"); });\n        var score = +(p1 instanceof P);\n\n        function thenFn(result)  { score += (result === \"foo\");  check(); }\n        function catchFn(result) { score += (result === \"quux\"); check(); }\n        function shouldNotRun(result)  { score = -Infinity;   }\n\n        p1.then(thenFn, shouldNotRun);\n        p2.then(shouldNotRun, catchFn);\n        p1.catch(shouldNotRun);\n        p2.catch(catchFn);\n\n        p1.then(function() {\n          // P.prototype.then() should return a new P\n          score += p1.then() instanceof P && p1.then() !== p1;\n          check();\n        });\n\n        function check() {\n          if (score === 5) asyncTestPassed();\n        }"),
        correctPrototypeChain:f("class C extends Promise {}\n        var c = new C(function(resolve, reject) { resolve(\"foo\"); });\n        return c instanceof C && c instanceof Promise && Object.getPrototypeOf(C) === Promise;"),
        promiseAll:a("class P extends Promise {}\n        var fulfills = P.all([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,100,\"bar\"); }),\n        ]);\n        var rejects = P.all([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 100,\"qux\"); }),\n        ]);\n        var score = +(fulfills instanceof P);\n        fulfills.then(function(result) { score += (result + \"\" === \"foo,bar\"); check(); });\n        rejects.catch(function(result) { score += (result === \"qux\"); check(); });\n\n        function check() {\n          if (score === 3) asyncTestPassed();\n        }"),
        promiseRace:a("class P extends Promise {}\n        var fulfills = P.race([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 300,\"bar\"); }),\n        ]);\n        var rejects = P.race([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,300,\"qux\"); }),\n        ]);\n        var score = +(fulfills instanceof P);\n        fulfills.then(function(result) { score += (result === \"foo\"); check(); });\n        rejects.catch(function(result) { score += (result === \"baz\"); check(); });\n\n        function check() {\n          if (score === 3) asyncTestPassed();\n        }")
      },
      "miscellaneous subclassables": { // test+
        booleanIsSubclassable:f("class C extends Boolean {}\n        var c = new C(true);\n        return c instanceof Boolean\n          && c instanceof C\n          && c == true;"),
        numberIsSubclassable:f("class C extends Number {}\n        var c = new C(6);\n        return c instanceof Number\n          && c instanceof C\n          && +c === 6;"),
        stringIsSubclassable:f("class C extends String {}\n        var c = new C(\"golly\");\n        return c instanceof String\n          && c instanceof C\n          && c + '' === \"golly\"\n          && c[0] === \"g\"\n          && c.length === 5;"),
        mapIsSubclassable:f("var key = {};\n        class M extends Map {}\n        var map = new M();\n\n        map.set(key, 123);\n\n        return map instanceof M && map.has(key) && map.get(key) === 123;"),
        setIsSubclassable:f("var obj = {};\n        class S extends Set {}\n        var set = new S();\n\n        set.add(123);\n        set.add(123);\n\n        return set instanceof S && set.has(123);")
      }
    },
    misc: {

      "prototype of bound functions": { // test+
        basicFunctions:f("function correctProtoBound(proto) {\n            var f = function(){};\n            if (Object.setPrototypeOf) {\n              Object.setPrototypeOf(f, proto);\n            }\n            else {\n              f.__proto__ = proto;\n            }\n            var boundF = Function.prototype.bind.call(f, null);\n            return Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n            && correctProtoBound({})\n            && correctProtoBound(null);"),
        generatorFunctions:f("function correctProtoBound(proto) {\n            var f = function*(){};\n            if (Object.setPrototypeOf) {\n              Object.setPrototypeOf(f, proto);\n            }\n            else {\n              f.__proto__ = proto;\n            }\n            var boundF = Function.prototype.bind.call(f, null);\n            return Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n            && correctProtoBound({})\n            && correctProtoBound(null);"),
        arrowFunctions:f("function correctProtoBound(proto) {\n            var f = ()=>5;\n            if (Object.setPrototypeOf) {\n              Object.setPrototypeOf(f, proto);\n            }\n            else {\n              f.__proto__ = proto;\n            }\n            var boundF = Function.prototype.bind.call(f, null);\n            return Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n            && correctProtoBound({})\n            && correctProtoBound(null);"),
        classes:f("function correctProtoBound(proto) {\n            class C {}\n            if (Object.setPrototypeOf) {\n              Object.setPrototypeOf(C, proto);\n            }\n            else {\n              C.__proto__ = proto;\n            }\n            var boundF = Function.prototype.bind.call(C, null);\n            return Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n            && correctProtoBound({})\n            && correctProtoBound(null);"),
        subclasses:f("function correctProtoBound(superclass) {\n            class C extends superclass {\n              constructor() {\n                return Object.create(null);\n              }\n            }\n            var boundF = Function.prototype.bind.call(C, null);\n            return Object.getPrototypeOf(boundF) === Object.getPrototypeOf(C);\n          }\n          return correctProtoBound(function(){})\n            && correctProtoBound(Array)\n            && correctProtoBound(null);")
      },
      "Proxy, internal 'get' calls": { // test+
        toPrimitive:f("// ToPrimitive -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({toString:Function()}, { get: function(o, k) { get.push(k); return o[k]; }});\n        p + 3;\n        return get[0] === Symbol.toPrimitive && get.slice(1) + '' === \"valueOf,toString\";"),
        createListFromArrayLike:f("// CreateListFromArrayLike -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({length:2, 0:0, 1:0}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Function.prototype.apply({}, p);\n        return get + '' === \"length,0,1\";"),
        instanceofOperator:f("// InstanceofOperator -> GetMethod -> GetV -> [[Get]]\n        // InstanceofOperator -> OrdinaryHasInstance -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function(), { get: function(o, k) { get.push(k); return o[k]; }});\n        ({}) instanceof p;\n        return get[0] === Symbol.hasInstance && get.slice(1) + '' === \"prototype\";"),
        hasBinding:f("// HasBinding -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({foo:1}, { get: function(o, k) { get.push(k); return o[k]; }});\n        p[Symbol.unscopables] = p;\n        with(p) {\n          typeof foo;\n        }\n        return get[0] === Symbol.unscopables && get.slice(1) + '' === \"foo\";"),
        createDynamicFunction:f("// CreateDynamicFunction -> GetPrototypeFromConstructor -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function, { get: function(o, k) { get.push(k); return o[k]; }});\n        new p;\n        return get + '' === \"prototype\";"),
        classDefinitionEvaluation:f("// ClassDefinitionEvaluation -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function(), { get: function(o, k) { get.push(k); return o[k]; }});\n        class C extends p {}\n        return get + '' === \"prototype\";"),
        iteratorCompleteIteratorValue:f("// IteratorComplete -> Get -> [[Get]]\n        // IteratorValue -> Get -> [[Get]]\n        var get = [];\n        var iterable = {};\n        iterable[Symbol.iterator] = function() {\n          return {\n            next: function() {\n              return new Proxy({ value: 2, done: false }, { get: function(o, k) { get.push(k); return o[k]; }});\n            }\n          };\n        }\n        var i = 0;\n        for(var e of iterable) {\n          if (++i >= 2) break;\n        }\n        return get + '' === \"done,value,done,value\";"),
        toPropertyDescriptor:f("// ToPropertyDescriptor -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({\n            enumerable: true, configurable: true, value: true,\n            writable: true, get: Function(), set: Function()\n          }, { get: function(o, k) { get.push(k); return o[k]; }});\n        try {\n          // This will throw, since it will have true for both \"get\" and \"value\",\n          // but not before performing a Get on every property.\n          Object.defineProperty({}, \"foo\", p);\n        } catch(e) {\n          return get + '' === \"enumerable,configurable,value,writable,get,set\";\n        }"),
        objectAssign:f("// Object.assign -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({foo:1, bar:2}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Object.assign({}, p);\n        return get + '' === \"foo,bar\";"),
        objectDefineProperties:f("// Object.defineProperties -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({foo:{}, bar:{}}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Object.defineProperties({}, p);\n        return get + '' === \"foo,bar\";"),
        functionPrototypeBind:f("// Function.prototype.bind -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function(), { get: function(o, k) { get.push(k); return o[k]; }});\n        Function.prototype.bind.call(p);\n        return get + '' === \"length,name\";"),
        errorPrototypeToString:f("// Error.prototype.toString -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Error.prototype.toString.call(p);\n        return get + '' === \"name,message\";"),
        stringRaw:f("// String.raw -> Get -> [[Get]]\n        var get = [];\n        var raw = new Proxy({length: 2, 0: '', 1: ''}, { get: function(o, k) { get.push(k); return o[k]; }});\n        var p = new Proxy({raw: raw}, { get: function(o, k) { get.push(k); return o[k]; }});\n        String.raw(p);\n        return get + '' === \"raw,length,0,1\";"),
        regExpConstructor:f("// RegExp -> Get -> [[Get]]\n        var get = [];\n        var re = { constructor: null };\n        re[Symbol.match] = true;\n        var p = new Proxy(re, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp(p);\n        return get[0] === Symbol.match && get.slice(1) + '' === \"constructor,source,flags\";"),
        regExpPrototypeFlags:f("// RegExp.prototype.flags -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Object.getOwnPropertyDescriptor(RegExp.prototype, 'flags').get.call(p);\n        return get + '' === \"global,ignoreCase,multiline,unicode,sticky\";"),
        regExpPrototypeTest:f("// RegExp.prototype.test -> RegExpExec -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype.test.call(p);\n        return get + '' === \"exec\";"),
        regExpPrototypeSymbolMatch:f("// RegExp.prototype[Symbol.match] -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.match].call(p);\n        p.global = true;\n        RegExp.prototype[Symbol.match].call(p);\n        return get + '' === \"global,exec,global,unicode,exec\";"),
        regExpPrototypeSymbolReplace:f("// RegExp.prototype[Symbol.replace] -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.replace].call(p);\n        p.global = true;\n        RegExp.prototype[Symbol.replace].call(p);\n        return get + '' === \"global,exec,global,unicode,exec\";"),
        regExpPrototypeSymbolSearch:f("// RegExp.prototype[Symbol.search] -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.search].call(p);\n        return get + '' === \"lastIndex,exec\";"),
        regExpPrototypeSymbolSplit:f("// RegExp.prototype[Symbol.split] -> Get -> [[Get]]\n        var get = [];\n        var constructor = Function();\n        constructor[Symbol.species] = Object;\n        var p = new Proxy({ constructor: constructor, flags: '', exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.split].call(p, \"\");\n        return get + '' === \"constructor,flags,exec\";"),
        arrayFrom:f("// Array.from -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({length: 2, 0: '', 1: ''}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.from(p);\n        return get[0] === Symbol.iterator && get.slice(1) + '' === \"length,0,1\";"),
        arrayPrototypeConcat:f("// Array.prototype.concat -> Get -> [[Get]]\n        var get = [];\n        var arr = [1];\n        arr.constructor = undefined;\n        var p = new Proxy(arr, { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.concat.call(p,p);\n        return get[0] === \"constructor\"\n          && get[1] === Symbol.isConcatSpreadable\n          && get[2] === \"length\"\n          && get[3] === \"0\"\n          && get[4] === get[1] && get[5] === get[2] && get[6] === get[3]\n          && get.length === 7;"),
        arrayPrototypeIterationMethods:f("// Array.prototype methods -> Get -> [[Get]]\n        var methods = ['copyWithin', 'every', 'fill', 'filter', 'find', 'findIndex', 'forEach',\n          'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', 'some'];\n        var get;\n        var p = new Proxy({length: 2, 0: '', 1: ''}, { get: function(o, k) { get.push(k); return o[k]; }});\n        for(var i = 0; i < methods.length; i+=1) {\n          get = [];\n          Array.prototype[methods[i]].call(p, Function());\n          if (get + '' !== (\n            methods[i] === 'fill' ? \"length\" :\n            methods[i] === 'every' ? \"length,0\" :\n            methods[i] === 'lastIndexOf' || methods[i] === 'reduceRight' ? \"length,1,0\" :\n            \"length,0,1\"\n          )) {\n            return false;\n          }\n        }\n        return true;"),
        arrayPrototypePop:f("// Array.prototype.pop -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,1,2,3], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.pop.call(p);\n        return get + '' === \"length,3\";"),
        arrayPrototypeReverse:f("// Array.prototype.reverse -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,,2,,4,,], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.reverse.call(p);\n        return get + '' === \"length,0,4,2\";"),
        arrayPrototypeShift:f("// Array.prototype.shift -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,1,2,3], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.shift.call(p);\n        return get + '' === \"length,0,1,2,3\";"),
        arrayPrototypeSplice:f("// Array.prototype.splice -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,1,2,3], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.splice.call(p,1,1);\n        Array.prototype.splice.call(p,1,0,1);\n        return get + '' === \"length,constructor,1,2,3,length,constructor,2,1\";"),
        arrayPrototypeToString:f("// Array.prototype.toString -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ join:Function() }, { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.toString.call(p);\n        return get + '' === \"join\";"),
        jSONStringify:f("// JSON.stringify -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        JSON.stringify(p);\n        return get + '' === \"toJSON\";"),
        promiseResolveFunctions:f("// Promise resolve functions -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        new Promise(function(resolve){ resolve(p); });\n        return get + '' === \"then\";"),
        stringPrototypeMatch:f("// String.prototype.match -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".match(p);\n        return get[0] === Symbol.match && get[1] === Symbol.toPrimitive && get.length === 2;"),
        stringPrototypeReplace:f("// String.prototype.replace functions -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".replace(p);\n        return get[0] === Symbol.replace && get[1] === Symbol.toPrimitive && get.length === 2;"),
        stringPrototypeSearch:f("// String.prototype.search functions -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".search(p);\n        return get[0] === Symbol.search && get[1] === Symbol.toPrimitive && get.length === 2;"),
        stringPrototypeSplit:f("// String.prototype.split functions -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".split(p);\n        return get[0] === Symbol.split && get[1] === Symbol.toPrimitive && get.length === 2;"),
        datePrototypeToJSON:f("// Date.prototype.toJSON -> ToPrimitive -> Get -> [[Get]]\n        // Date.prototype.toJSON -> Invoke -> GetMethod -> GetV -> [[Get]]\n        var get = [];\n        var p = new Proxy({toString:Function(),toISOString:Function()}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Date.prototype.toJSON.call(p);\n        return get[0] === Symbol.toPrimitive && get.slice(1) + '' === \"valueOf,toString,toISOString\";")
      },
      "Proxy, internal 'set' calls": { // test+
        objectAssign:f("// Object.assign -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy({}, { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        Object.assign(p, { foo: 1, bar: 2 });\n        return set + '' === \"foo,bar\";"),
        arrayFrom:f("// Array.from -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy({}, { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        Array.from.call(function(){ return p; }, {length:2, 0:1, 1:2});\n        return set + '' === \"length\";"),
        arrayOf:f("// Array.from -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy({}, { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        Array.of.call(function(){ return p; }, 1, 2, 3);\n        return set + '' === \"length\";"),
        arrayPrototypeCopyWithin:f("// Array.prototype.copyWithin -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([1,2,3,4,5,6], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.copyWithin(0, 3);\n        return set + '' === \"0,1,2\";"),
        arrayPrototypeFill:f("// Array.prototype.fill -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([1,2,3,4,5,6], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.fill(0, 3);\n        return set + '' === \"3,4,5\";"),
        arrayPrototypePop:f("// Array.prototype.pop -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.pop();\n        return set + '' === \"length\";"),
        arrayPrototypePush:f("// Array.prototype.push -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.push(0,0,0);\n        return set + '' === \"0,1,2,length\";"),
        arrayPrototypeReverse:f("// Array.prototype.reverse -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([0,0,0,,], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.reverse();\n        return set + '' === \"3,1,2\";"),
        arrayPrototypeShift:f("// Array.prototype.shift -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([0,0,,0], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.shift();\n        return set + '' === \"0,2,length\";"),
        arrayPrototypeSplice:f("// Array.prototype.splice -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([1,2,3], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.splice(1,0,0);\n        return set + '' === \"3,2,1,length\";"),
        arrayPrototypeUnshift:f("// Array.prototype.unshift -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([0,0,,0], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.unshift(0,1);\n        return set + '' === \"5,3,2,0,1,length\";")
      },
      "Proxy, internal 'defineProperty' calls": { // test+
        set:f("// [[Set]] -> [[DefineOwnProperty]]\n        var def = [];\n        var p = new Proxy({foo:1, bar:2}, { defineProperty: function(o, v, desc) { def.push(v); Object.defineProperty(o, v, desc); return true; }});\n        p.foo = 2; p.bar = 4;\n        return def + '' === \"foo,bar\";"),
        setIntegrityLevel:f("// SetIntegrityLevel -> DefinePropertyOrThrow -> [[DefineOwnProperty]]\n        var def = [];\n        var p = new Proxy({foo:1, bar:2}, { defineProperty: function(o, v, desc) { def.push(v); Object.defineProperty(o, v, desc); return true; }});\n        Object.freeze(p);\n        return def + '' === \"foo,bar\";")
      },
      "Proxy, internal 'deleteProperty' calls": { // test+
        arrayPrototypeCopyWithin:f("// Array.prototype.copyWithin -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,0,,,,], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.copyWithin(0,3);\n        return del + '' === \"0,1,2\";"),
        arrayPrototypePop:f("// Array.prototype.pop -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.pop();\n        return del + '' === \"2\";"),
        arrayPrototypeReverse:f("// Array.prototype.reverse -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,,2,,4,,], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.reverse();\n        return del + '' === \"0,4,2\";"),
        arrayPrototypeShift:f("// Array.prototype.shift -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,,0,,0,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.shift();\n        return del + '' === \"0,2,5\";"),
        arrayPrototypeSplice:f("// Array.prototype.splice -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,0,0,,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.splice(2,2,0);\n        return del + '' === \"3,5\";"),
        arrayPrototypeUnshift:f("// Array.prototype.unshift -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,,0,,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.unshift(0);\n        return del + '' === \"5,3\";")
      },
      "Proxy, internal 'getOwnPropertyDescriptor' calls": { // test+
        set:f("// [[Set]] -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy({},\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        p.foo = 1; p.bar = 1;\n        return gopd + '' === \"foo,bar\";"),
        objectAssign:f("// Object.assign -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy({foo:1, bar:2},\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        Object.assign({}, p);\n        return gopd + '' === \"foo,bar\";"),
        objectPrototypeHasOwnProperty:f("// Object.prototype.hasOwnProperty -> HasOwnProperty -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy({foo:1, bar:2},\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        p.hasOwnProperty('garply');\n        return gopd + '' === \"garply\";"),
        functionPrototypeBind:f("// Function.prototype.bind -> HasOwnProperty -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy(Function(),\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        p.bind();\n        return gopd + '' === \"length\";")
      },
      "Proxy, internal 'ownKeys' calls": { // test+
        setIntegrityLevel:f("// SetIntegrityLevel -> [[OwnPropertyKeys]]\n        var ownKeysCalled = 0;\n        var p = new Proxy({}, { ownKeys: function(o) { ownKeysCalled++; return Object.keys(o); }});\n        Object.freeze(p);\n        return ownKeysCalled === 1;"),
        testIntegrityLevel:f("// TestIntegrityLevel -> [[OwnPropertyKeys]]\n        var ownKeysCalled = 0;\n        var p = new Proxy(Object.preventExtensions({}), { ownKeys: function(o) { ownKeysCalled++; return Object.keys(o); }});\n        Object.isFrozen(p);\n        return ownKeysCalled === 1;"),
        serializeJSONObject:f("// SerializeJSONObject -> EnumerableOwnNames -> [[OwnPropertyKeys]]\n        var ownKeysCalled = 0;\n        var p = new Proxy({}, { ownKeys: function(o) { ownKeysCalled++; return Object.keys(o); }});\n        JSON.stringify({a:p,b:p});\n        return ownKeysCalled === 2;")
      },
      "Object static methods accept primitives": { // test+
        objectGetPrototypeOf:f("return Object.getPrototypeOf('a').constructor === String;"),
        objectGetOwnPropertyDescriptor:f("return Object.getOwnPropertyDescriptor('a', 'foo') === undefined;"),
        objectGetOwnPropertyNames:f("var s = Object.getOwnPropertyNames('a');\n        return s.length === 2 &&\n          ((s[0] === 'length' && s[1] === '0') || (s[0] === '0' && s[1] === 'length'));"),
        objectSeal:f("return Object.seal('a') === 'a';"),
        objectFreeze:f("return Object.freeze('a') === 'a';"),
        objectPreventExtensions:f("return Object.preventExtensions('a') === 'a';"),
        objectIsSealed:f("return Object.isSealed('a') === true;"),
        objectIsFrozen:f("return Object.isFrozen('a') === true;"),
        objectIsExtensible:f("return Object.isExtensible('a') === false;"),
        objectKeys:f("var s = Object.keys('a');\n        return s.length === 1 && s[0] === '0';")
      },
      "own property order": { // test+
        forIn:f("var obj = {\n          // Non-negative integer names appear first in value order\n          2:    true,\n          0:    true,\n          1:    true,\n          // Other string names appear in source order\n          ' ':  true,\n          // Non-negative integers are sorted above other names\n          9:    true,\n          D:    true,\n          B:    true,\n          // Negative integers are treated as other names\n          '-1': true,\n        };\n        // Other string names are added in order of creation\n        obj.A = true;\n        // Non-negative integer names, conversely, ignore order of creation\n        obj[3] = true;\n        // Having a total of 20+ properties doesn't affect property order\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        // Object.defineProperty doesn't affect the above rules\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        // Deleting and reinserting a property doesn't preserve its position\n        delete obj[2];\n        obj[2] = true;\n\n        var result = '';\n        for(var i in obj) {\n          result += i;\n        }\n        return result === \"012349 DB-1AEFGHIJKLMNOPQRSTUVWXYZC\";"),
        objectKeys:f("var obj = {\n          2:    true,\n          0:    true,\n          1:    true,\n          ' ':  true,\n          9:    true,\n          D:    true,\n          B:    true,\n          '-1': true\n        };\n        obj.A = true;\n        obj[3] = true;\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        delete obj[2];\n        obj[2] = true;\n\n        return Object.keys(obj).join('') === \"012349 DB-1AEFGHIJKLMNOPQRSTUVWXYZC\";"),
        objectGetOwnPropertyNames:f("var obj = {\n          2:    true,\n          0:    true,\n          1:    true,\n          ' ':  true,\n          9:    true,\n          D:    true,\n          B:    true,\n          '-1': true\n        };\n        obj.A = true;\n        obj[3] = true;\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        delete obj[2];\n        obj[2] = true;\n\n        return Object.getOwnPropertyNames(obj).join('') === \"012349 DB-1AEFGHIJKLMNOPQRSTUVWXYZC\";"),
        objectAssign:f("var result = '';\n        var target = {};\n\n        \"012349 DBACEFGHIJKLMNOPQRST\".split('').concat(-1).forEach(function(key){\n          Object.defineProperty(target, key, {\n            set: function(){\n              result += key;\n            }\n          })\n        });\n\n        var obj = {2: 2, 0: 0, 1: 1, ' ': ' ', 9: 9, D: 'D', B: 'B', '-1': '-1'};\n        Object.defineProperty(obj, 'A', {value: 'A',  enumerable: true});\n        Object.defineProperty(obj, '3', {value: '3',  enumerable: true});\n        Object.defineProperty(obj, 'C', {value: 'C',  enumerable: true});\n        Object.defineProperty(obj, '4', {value: '4',  enumerable: true});\n        delete obj[2];\n        obj[2] = true;\n\n        \"EFGHIJKLMNOPQRST\".split('').forEach(function(key){\n          obj[key] = key;\n        });\n\n        Object.assign(target, obj);\n\n        return result === \"012349 DB-1ACEFGHIJKLMNOPQRST\";"),
        jSONStringify:f("var obj = {\n          2:    true,\n          0:    true,\n          1:    true,\n          ' ':  true,\n          9:    true,\n          D:    true,\n          B:    true,\n          '-1': true\n        };\n        obj.A = true;\n        obj[3] = true;\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        delete obj[2];\n        obj[2] = true;\n\n        return JSON.stringify(obj) ===\n          '{\"0\":true,\"1\":true,\"2\":true,\"3\":true,\"4\":true,\"9\":true,\" \":true,\"D\":true,\"B\":true,\"-1\":true,\"A\":true,\"E\":true,\"F\":true,\"G\":true,\"H\":true,\"I\":true,\"J\":true,\"K\":true,\"L\":true,\"M\":true,\"N\":true,\"O\":true,\"P\":true,\"Q\":true,\"R\":true,\"S\":true,\"T\":true,\"U\":true,\"V\":true,\"W\":true,\"X\":true,\"Y\":true,\"Z\":true,\"C\":true}';"),
        jSONParse:f("var result = '';\n        JSON.parse(\n          '{\"0\":true,\"1\":true,\"2\":true,\"3\":true,\"4\":true,\"9\":true,\" \":true,\"D\":true,\"B\":true,\"-1\":true,\"E\":true,\"F\":true,\"G\":true,\"H\":true,\"I\":true,\"J\":true,\"K\":true,\"L\":true,\"A\":true,\"C\":true}',\n          function reviver(k,v) {\n            result += k;\n            return v;\n          }\n        );\n        return result === \"012349 DB-1EFGHIJKLAC\";"),
        reflectOwnKeysStringKeyOrder:f("var obj = {\n          2:    true,\n          0:    true,\n          1:    true,\n          ' ':  true,\n          9:    true,\n          D:    true,\n          B:    true,\n          '-1': true\n        };\n        obj.A = true;\n        obj[3] = true;\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        delete obj[2];\n        obj[2] = true;\n\n        return Reflect.ownKeys(obj).join('') === \"012349 DB-1AEFGHIJKLMNOPQRSTUVWXYZC\";"),
        reflectOwnKeysSymbolKeyOrder:f("var sym1 = Symbol(), sym2 = Symbol(), sym3 = Symbol();\n        var obj = {\n          1:    true,\n          A:    true,\n        };\n        obj.B = true;\n        obj[sym1] = true;\n        obj[2] = true;\n        obj[sym2] = true;\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, sym3,{ value: true, enumerable: true });\n        Object.defineProperty(obj, 'D', { value: true, enumerable: true });\n\n        var result = Reflect.ownKeys(obj);\n        var l = result.length;\n        return result[l-3] === sym1 && result[l-2] === sym2 && result[l-1] === sym3;")
      },
      "miscellaneous": { // test+
        noEscapedReservedWordsAsIdentifiers:f("var \\u0061;\n        try {\n          eval('var v\\\\u0061r');\n        } catch(e) {\n          return true;\n        }"),
        duplicatePropertyNamesInStrictMode:f("'use strict';\n        return this === undefined && ({ a:1, a:1 }).a === 1;"),
        noSemicolonNeededAfterDoWhile:f("do {} while (false) return true;"),
        noAssignmentsAllowedInForInHead:f("try {\n          eval('for (var i = 0 in {}) {}');\n        }\n        catch(e) {\n          return true;\n        }"),
        accessorsArenTConstructors:f("try {\n          new (Object.getOwnPropertyDescriptor({get a(){}}, 'a')).get;\n        } catch(e) {\n          return true;\n        }"),
        invalidDate:f("return new Date(NaN) + \"\" === \"Invalid Date\";"),
        regExpConstructorCanAlterFlags:f("return new RegExp(/./im, \"g\").global === true;"),
        builtInPrototypesAreNotInstances:f("try {\n          RegExp.prototype.source; return false;\n        } catch(e) {}\n        try {\n          Date.prototype.valueOf(); return false;\n        } catch(e) {}\n\n        if (![Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError].every(function (E) {\n            return Object.prototype.toString.call(E.prototype) === '[object Object]';\n        })) {\n          return false;\n        }\n\n        return true;"),
        functionLengthIsConfigurable:f("var fn = function(a, b) {};\n\n        var desc = Object.getOwnPropertyDescriptor(fn, \"length\");\n        if (desc.configurable) {\n          Object.defineProperty(fn, \"length\", { value: 1 });\n          return fn.length === 1;\n        }\n\n        return false;"),
        stringPrototypeCaseMethodsUnicodeSupport:f("return \"𐐘\".toLowerCase() === \"𐑀\" && \"𐑀\".toUpperCase() === \"𐐘\";")
      }
    },
    annexB: {

      "non-strict function semantics": { // test+
        hoistedBlockLevelFunctionDeclaration:f("// Note: only available outside of strict mode.\n        if (!this) return false;\n        var passed = f() === 1;\n        function f() { return 1; }\n\n        passed &= typeof g === 'undefined';\n        { function g() { return 1; } }\n        passed &= g() === 1;\n\n        passed &= h() === 2;\n        { function h() { return 1; } }\n        function h() { return 2; }\n        passed &= h() === 1;\n\n        return passed;"),
        labeledFunctionStatements:f("// Note: only available outside of strict mode.\n        if (!this) return false;\n\n        label: function foo() { return 2; }\n        return foo() === 2;"),
        functionStatementsInIfStatementClauses:f("// Note: only available outside of strict mode.\n        if (!this) return false;\n\n        if(true) function foo() { return 2; }\n        if(false) {} else function bar() { return 3; }\n        if(true) function baz() { return 4; } else {}\n        if(false) function qux() { return 5; } else function qux() { return 6; }\n        return foo() === 2 && bar() === 3 && baz() === 4 && qux() === 6;")
      },
      "__proto__ in object literals": { // test+
        basicSupport:f("return { __proto__ : [] } instanceof Array\n          && !({ __proto__ : null } instanceof Object);"),
        multiple__proto__IsAnError:f("try {\n          eval(\"({ __proto__ : [], __proto__: {} })\");\n        }\n        catch(e) {\n          return true;\n        }"),
        notAComputedProperty:f("if (!({ __proto__ : [] } instanceof Array)) {\n          return false;\n        }\n        var a = \"__proto__\";\n        return !({ [a] : [] } instanceof Array);"),
        notAShorthandProperty:f("if (!({ __proto__ : [] } instanceof Array)) {\n          return false;\n        }\n        var __proto__ = [];\n        return !({ __proto__ } instanceof Array);"),
        notAShorthandMethod:f("if (!({ __proto__ : [] } instanceof Array)) {\n          return false;\n        }\n        return !({ __proto__(){} } instanceof Function);")
      },
      "Object.prototype.__proto__": { // test+
        getPrototype:f("var A = function(){};\n        return (new A()).__proto__ === A.prototype;"),
        setPrototype:f("var o = {};\n        o.__proto__ = Array.prototype;\n        return o instanceof Array;"),
        absentFromObjectCreateNull:f("var o = Object.create(null), p = {};\n        o.__proto__ = p;\n        return Object.getPrototypeOf(o) !== p;"),
        presentInHasOwnProperty:f("return Object.prototype.hasOwnProperty('__proto__');"),
        correctPropertyDescriptor:f("var desc = Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\");\n        var A = function(){};\n\n        return (desc\n          && \"get\" in desc\n          && \"set\" in desc\n          && desc.configurable\n          && !desc.enumerable);"),
        presentInObjectGetOwnPropertyNames:f("return Object.getOwnPropertyNames(Object.prototype).indexOf('__proto__') > -1;")
      },
      "String.prototype HTML methods": { // test+
        existence:f("var i, names = [\"anchor\", \"big\", \"bold\", \"fixed\", \"fontcolor\", \"fontsize\",\n          \"italics\", \"link\", \"small\", \"strike\", \"sub\", \"sup\"];\n        for (i = 0; i < names.length; i++) {\n          if (typeof String.prototype[names[i]] !== 'function') {\n            return false;\n          }\n        }\n        return true;"),
        tagsNamesAreLowercase:f("var i, names = [\"anchor\", \"big\", \"bold\", \"fixed\", \"fontcolor\", \"fontsize\",\n          \"italics\", \"link\", \"small\", \"strike\", \"sub\", \"sup\"];\n        for (i = 0; i < names.length; i++) {\n          if (\"\"[names[i]]().toLowerCase() !== \"\"[names[i]]()) {\n            return false;\n          }\n        }\n        return true;"),
        quotesInArgumentsAreEscaped:f("var i, names = [\"anchor\", \"fontcolor\", \"fontsize\", \"link\"];\n        for (i = 0; i < names.length; i++) {\n          if (\"\"[names[i]]('\"') !== \"\"[names[i]]('&' + 'quot;')) {\n            return false;\n          }\n        }\n        return true;")
      },
    regExpPrototypeCompile:f("return typeof RegExp.prototype.compile === 'function';"),
      "RegExp syntax extensions": { // test+
        hyphensInCharacterSets:f("return /[\\w-_]/.exec(\"-\")[0] === \"-\";"),
        invalidCharacterEscapes:f("return /\\z/.exec(\"\\\\z\")[0] === \"z\"\n          && /[\\z]/.exec(\"[\\\\z]\")[0] === \"z\";"),
        invalidControlCharacterEscapes:f("return /\\c2/.exec(\"\\\\c2\")[0] === \"\\\\c2\";"),
        invalidUnicodeEscapes:f("return /\\u1/.exec(\"u1\")[0] === \"u1\"\n          && /[\\u1]/.exec(\"u\")[0] === \"u\";"),
        invalidHexadecimalEscapes:f("return /\\x1/.exec(\"x1\")[0] === \"x1\"\n          && /[\\x1]/.exec(\"x\")[0] === \"x\";"),
        incompletePatternsAndQuantifiers:f("return /x{1/.exec(\"x{1\")[0] === \"x{1\"\n          && /x]1/.exec(\"x]1\")[0] === \"x]1\";"),
        octalEscapeSequences:f("return /\\041/.exec(\"!\")[0] === \"!\"\n          && /[\\041]/.exec(\"!\")[0] === \"!\";"),
        invalidBackreferencesBecomeOctalEscapes:f("return /\\41/.exec(\"!\")[0] === \"!\"\n          && /[\\41]/.exec(\"!\")[0] === \"!\";")
      },
    hTMLStyleComments:f("--> A comment\n    <!-- Another comment\n    var a = 3; <!-- Another comment\n    return a === 3;")
    }// category es6

  }
};
