// ES6 compatibility checks
// -------------------------
function f(b){return new Function(b)}
var tests = {es6: {

    "basic functionality":f("\n        function * generator(){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "generator function expressions":f("\n        var generator = function * (){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "correct \"this\" binding":f("\n        function * generator(){\n          yield this.x; yield this.y;\n        };\n        var iterator = { g: generator, x: 5, y: 6 }.g();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "can't use \"this\" with new":f("\n        function * generator(){\n          yield this.x; yield this.y;\n        };\n        try {\n          (new generator()).next();\n        }\n        catch (e) {\n          return true;\n        }\n      "),
    "sending":f("\n        var sent;\n        function * generator(){\n          sent = [yield 5, yield 6];\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.next(\"foo\");\n        iterator.next(\"bar\");\n        return sent[0] === \"foo\" && sent[1] === \"bar\";\n      "),
    "%GeneratorPrototype%":f("\n        function * generatorFn(){}\n        var ownProto = Object.getPrototypeOf(generatorFn());\n        var passed = ownProto === generatorFn.prototype;\n\n        var sharedProto = Object.getPrototypeOf(ownProto);\n        passed &= sharedProto !== Object.prototype &&\n          sharedProto === Object.getPrototypeOf(function*(){}.prototype) &&\n          sharedProto.hasOwnProperty('next');\n\n        return passed;\n      "),
    "%GeneratorPrototype%.constructor":f("\n        function * g (){}\n        var iterator = new g.constructor(\"a\",\"b\",\"c\",\"yield a; yield b; yield c;\")(5,6,7);\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "%GeneratorPrototype%.throw":f("\n        var passed = false;\n        function * generator(){\n          try {\n            yield 5; yield 6;\n          } catch(e) {\n            passed = (e === \"foo\");\n          }\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.throw(\"foo\");\n        return passed;\n      "),
    "%GeneratorPrototype%.return":f("\n        function * generator(){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.return(\"quxquux\");\n        passed    &= item.value === \"quxquux\" && item.done === true;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield operator precedence":f("\n        var passed;\n        function * generator(){\n          passed = yield 0 ? true : false;\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.next(true);\n        return passed;\n      "),
    "yield *, arrays":f("\n        var iterator = (function * generator() {\n          yield * [5, 6];\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield *, sparse arrays":f("\n        var iterator = (function * generator() {\n          yield * [,,];\n        }());\n        var item = iterator.next();\n        var passed = item.value === undefined && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield *, strings":f("\n        var iterator = (function * generator() {\n          yield * \"56\";\n        }());\n        var item = iterator.next();\n        var passed = item.value === \"5\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === \"6\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield *, astral plane strings":f("\n        var iterator = (function * generator() {\n          yield * \"𠮷𠮶\";\n        }());\n        var item = iterator.next();\n        var passed = item.value === \"𠮷\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === \"𠮶\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield *, generator instances":f("\n        var iterator = (function * generator() {\n          yield * (function*(){ yield 5; yield 6; yield 7; }());\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield *, generic iterables":f("\n        var iterator = (function * generator() {\n          yield * global.__createIterableObject([5, 6, 7]);\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield *, instances of iterables":f("\n        var iterator = (function * generator() {\n          yield * Object.create(__createIterableObject([5, 6, 7]));\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "yield * on non-iterables is a runtime error":f("\n        var iterator = (function * generator() {\n          yield * [5];\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        iterator = (function * generator() {\n          yield * 5;\n        }());\n        try {\n          iterator.next();\n        } catch (e) {\n          return passed;\n        }\n      "),
    "yield *, iterator closing":f("\n        var closed = '';\n        var iter = __createIterableObject([1, 2, 3], {\n          'return': function(){\n            closed += 'a';\n            return {done: true};\n          }\n        });\n        var gen = (function* generator(){\n          try {\n            yield *iter;\n          } finally {\n            closed += 'b';\n          }\n        })();\n        gen.next();\n        gen['return']();\n        return closed === 'ab';\n      "),
    "yield *, iterator closing via throw()":f("\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'throw': undefined,\n          'return': function() {\n            closed = true;\n            return {done: true};\n          }\n        });\n        var gen = (function*(){\n          try {\n            yield *iter;\n          } catch(e){}\n        })();\n        gen.next();\n        gen['throw']();\n        return closed;\n      "),
    "shorthand generator methods":f("\n        var o = {\n          * generator() {\n            yield 5; yield 6;\n          },\n        };\n        var iterator = o.generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "string-keyed shorthand generator methods":f("\n        var o = {\n          * \"foo bar\"() {\n            yield 5; yield 6;\n          },\n        };\n        var iterator = o[\"foo bar\"]();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "computed shorthand generators":f("\n        var garply = \"generator\";\n        var o = {\n          * [garply] () {\n            yield 5; yield 6;\n          },\n        };\n        var iterator = o.generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "shorthand generator methods, classes":f("\n        class C {\n          * generator() {\n            yield 5; yield 6;\n          }\n        };\n        var iterator = new C().generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      "),
    "computed shorthand generators, classes":f("\n        var garply = \"generator\";\n        class C {\n          * [garply] () {\n            yield 5; yield 6;\n          }\n        }\n        var iterator = new C().generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      ")
}};
